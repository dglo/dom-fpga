% C:\PROJECTS\ICECUBE\DOR\FPGA\DCOM_01\RX_CHAN\DC_MREC.tdf %
% AHDL code created by Visual Software Solution's StateCAD 5.0 %
% Fri Aug 22 19:14:43 2003 %

% This AHDL code was generated using: %
%  binary encoded state assignment with structured code format. %
%  Minimization is enabled,  implied else is enabled,  %
%  and outputs are speed optimized. %

SUBDESIGN DC_MREC(
	CLK :	INPUT;
	cmd_rec0 :	INPUT;
	cmd_rec1 :	INPUT;
	cmd_rec2 :	INPUT;
	cmd_rec3 :	INPUT;
	ctrl_stb :	INPUT;
	data_stb :	INPUT;
	last_byte :	INPUT;
	my_adr :	INPUT;
	rec_ctrl :	INPUT;
	RESET :	INPUT;
	fifo_wrreq :	OUTPUT;
	msg_err :	OUTPUT;
	msg_rcvd :	OUTPUT;
	plct_en :	OUTPUT;
	plct_sload_H :	OUTPUT;
	plct_sload_L :	OUTPUT;
	bfstat_rcvd :	OUTPUT;
	comres_rcvd :	OUTPUT;
	drreq_rcvd :	OUTPUT;
	eof_rcvd :	OUTPUT;
	idle_rcvd :	OUTPUT;
	idreq_rcvd :	OUTPUT;
	stf_rcvd :	OUTPUT;
	sysres_rcvd :	OUTPUT;
	tcal_rcvd :	OUTPUT;
)


VARIABLE
	sreg : MACHINE OF BITS (SV2, SV3, SV4, SV5)
		WITH STATES (
			STF_WAIT =	B"1010",
			EOF_CHK =	B"0000",
			EOF_ERR =	B"0001",
			FIFO_WR =	B"0010",
			MSG_CTUP =	B"0011",
			MSTH =	B"0100",
			MSTL =	B"0101",
			PCT =	B"0110",
			PLD =	B"0111",
			PLH =	B"1000",
			PLL =	B"1001"
		);

	fifo_wrreq :	DFF;
	msg_err :	DFF;
	msg_rcvd :	DFF;
	plct_en :	DFF;
	plct_sload_H :	DFF;
	plct_sload_L :	DFF;

BEGIN

% Clock setup %
	fifo_wrreq.clk=CLK;
	msg_err.clk=CLK;
	msg_rcvd.clk=CLK;
	plct_en.clk=CLK;
	plct_sload_H.clk=CLK;
	plct_sload_L.clk=CLK;
	sreg.clk=CLK;

	sreg.reset =  RESET ;

	IF ( RESET ) THEN
		msg_err.clrn=GND;
		msg_rcvd.clrn=GND;
		fifo_wrreq.clrn=GND;
		plct_sload_H.clrn=GND;
		plct_sload_L.clrn=GND;
		plct_en.clrn=GND;
	ELSE
		msg_err.clrn=VCC;
		msg_rcvd.clrn=VCC;
		fifo_wrreq.clrn=VCC;
		plct_sload_H.clrn=VCC;
		plct_sload_L.clrn=VCC;
		plct_en.clrn=VCC;
	END IF;

	CASE sreg IS
		WHEN EOF_CHK =>
			IF ( !data_stb & !ctrl_stb & !eof_rcvd ) THEN 
				sreg = EOF_CHK;
				(msg_err,msg_rcvd,fifo_wrreq,plct_sload_H,plct_sload_L,plct_en)=(0,0,0,0,
					0,0);
			END IF;
			IF ( data_stb  #  ctrl_stb & !eof_rcvd ) THEN 
				sreg = EOF_ERR;
				(msg_err,msg_rcvd,fifo_wrreq,plct_sload_H,plct_sload_L,plct_en)=(1,0,0,0,
					0,0);
			END IF;
			IF ( eof_rcvd ) THEN 
				sreg = MSG_CTUP;
				(msg_err,msg_rcvd,fifo_wrreq,plct_sload_H,plct_sload_L,plct_en)=(0,1,0,0,
					0,0);
			END IF;
		WHEN EOF_ERR =>
			sreg = STF_WAIT;
			(msg_err,msg_rcvd,fifo_wrreq,plct_sload_H,plct_sload_L,plct_en)=(0,0,0,0,0
				,0);
		WHEN FIFO_WR =>
			IF ( data_stb ) THEN 
				sreg = PLD;
				(msg_err,msg_rcvd,fifo_wrreq,plct_sload_H,plct_sload_L,plct_en)=(0,0,0,0,
					0,0);
			ELSE
				sreg = FIFO_WR;
				(msg_err,msg_rcvd,fifo_wrreq,plct_sload_H,plct_sload_L,plct_en)=(0,0,1,0,
					0,1);
			END IF;
		WHEN MSG_CTUP =>
			sreg = STF_WAIT;
			(msg_err,msg_rcvd,fifo_wrreq,plct_sload_H,plct_sload_L,plct_en)=(0,0,0,0,0
				,0);
		WHEN MSTH =>
			IF ( data_stb ) THEN 
				sreg = PLL;
				(msg_err,msg_rcvd,fifo_wrreq,plct_sload_H,plct_sload_L,plct_en)=(0,0,1,0,
					1,0);
			ELSE
				sreg = MSTH;
				(msg_err,msg_rcvd,fifo_wrreq,plct_sload_H,plct_sload_L,plct_en)=(0,0,1,0,
					0,0);
			END IF;
		WHEN MSTL =>
			IF ( data_stb ) THEN 
				sreg = MSTH;
				(msg_err,msg_rcvd,fifo_wrreq,plct_sload_H,plct_sload_L,plct_en)=(0,0,1,0,
					0,0);
			ELSE
				sreg = MSTL;
				(msg_err,msg_rcvd,fifo_wrreq,plct_sload_H,plct_sload_L,plct_en)=(0,0,1,0,
					0,0);
			END IF;
		WHEN PCT =>
			IF ( data_stb ) THEN 
				sreg = EOF_CHK;
				(msg_err,msg_rcvd,fifo_wrreq,plct_sload_H,plct_sload_L,plct_en)=(0,0,0,0,
					0,0);
			ELSE
				sreg = PCT;
				(msg_err,msg_rcvd,fifo_wrreq,plct_sload_H,plct_sload_L,plct_en)=(0,0,0,0,
					0,0);
			END IF;
		WHEN PLD =>
			IF ( !last_byte ) THEN 
				sreg = FIFO_WR;
				(msg_err,msg_rcvd,fifo_wrreq,plct_sload_H,plct_sload_L,plct_en)=(0,0,1,0,
					0,1);
			END IF;
			IF ( last_byte ) THEN 
				sreg = PCT;
				(msg_err,msg_rcvd,fifo_wrreq,plct_sload_H,plct_sload_L,plct_en)=(0,0,0,0,
					0,0);
			END IF;
		WHEN PLH =>
			IF ( data_stb ) THEN 
				sreg = PLD;
				(msg_err,msg_rcvd,fifo_wrreq,plct_sload_H,plct_sload_L,plct_en)=(0,0,0,0,
					0,0);
			ELSE
				sreg = PLH;
				(msg_err,msg_rcvd,fifo_wrreq,plct_sload_H,plct_sload_L,plct_en)=(0,0,1,1,
					0,0);
			END IF;
		WHEN PLL =>
			IF ( data_stb ) THEN 
				sreg = PLH;
				(msg_err,msg_rcvd,fifo_wrreq,plct_sload_H,plct_sload_L,plct_en)=(0,0,1,1,
					0,0);
			ELSE
				sreg = PLL;
				(msg_err,msg_rcvd,fifo_wrreq,plct_sload_H,plct_sload_L,plct_en)=(0,0,1,0,
					1,0);
			END IF;
		WHEN STF_WAIT =>
			IF ( stf_rcvd ) THEN 
				sreg = MSTL;
				(msg_err,msg_rcvd,fifo_wrreq,plct_sload_H,plct_sload_L,plct_en)=(0,0,1,0,
					0,0);
			ELSE
				sreg = STF_WAIT;
				(msg_err,msg_rcvd,fifo_wrreq,plct_sload_H,plct_sload_L,plct_en)=(0,0,0,0,
					0,0);
			END IF;
	END CASE;


% Logic Equations %
bfstat_rcvd =  ctrl_stb & my_adr & rec_ctrl & !cmd_rec0 & !cmd_rec1 & 
	cmd_rec2 & cmd_rec3 ;

comres_rcvd =  ctrl_stb & my_adr & cmd_rec0 & cmd_rec1 & !cmd_rec2 & cmd_rec3
	 ;

drreq_rcvd =  ctrl_stb & my_adr & rec_ctrl & cmd_rec0 & !cmd_rec1 & cmd_rec2 
	& !cmd_rec3 ;

eof_rcvd =  ctrl_stb & my_adr & rec_ctrl & !cmd_rec0 & cmd_rec1 & !cmd_rec2 &
	 !cmd_rec3 ;

idle_rcvd =  ctrl_stb & my_adr & rec_ctrl & cmd_rec0 & cmd_rec1 & cmd_rec2 & 
	cmd_rec3 ;

idreq_rcvd =  ctrl_stb & my_adr & rec_ctrl & cmd_rec0 & cmd_rec1 & !cmd_rec2 
	& !cmd_rec3 ;

stf_rcvd =  ctrl_stb & my_adr & rec_ctrl & cmd_rec0 & !cmd_rec1 & !cmd_rec2 &
	 !cmd_rec3 ;

sysres_rcvd =  ctrl_stb & my_adr & rec_ctrl & cmd_rec0 & !cmd_rec1 & cmd_rec2
	 & cmd_rec3 ;

tcal_rcvd =  ctrl_stb & my_adr & rec_ctrl & !cmd_rec0 & cmd_rec1 & cmd_rec2 &
	 cmd_rec3 ;

END;
