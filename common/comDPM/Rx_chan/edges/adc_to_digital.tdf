TITLE "ADC to digital decoder";

INCLUDE "ONE_DET";
INCLUDE "ctup5";

--FUNCTION ONE_DET (CLK, ct[4..0], hl_edge, lh_edge, res)
--	RETURNS (ct_aclr, one);

--FUNCTION ctup5 (clock,	aclr)
--RETURNS (	q[4..0],	cout);


CONSTANT	DEC_MIN_THR = 20;

SUBDESIGN	adc_to_digital



(
	clk				: INPUT;
	reset			: INPUT;	
	in[9..2]		: INPUT;	-- Communication ADC, bits 0..1 unused 
	dudt[7..0]		: INPUT;
		
	hl_edge			: OUTPUT;
	lh_edge			: OUTPUT;
	
	one				: OUTPUT;	-- logic one, 1 clock lengths pulse
)

VARIABLE

	ina[7..0]		: DFF;		-- I/O register
	inb[7..0]		: DFF;
	inc[7..0]		: DFF;
	ind[7..0]		: DFF;
	
	hl_edge			: DFF;
	lh_edge			: DFF;
	
	a_greater_d		: NODE;
	d_greater_a		: NODE;

	ct				: ctup5;	-- 5 bit up counter
	hl_dec_stm		: ONE_DET;	-- state machine
	
BEGIN
	ina[].clk				= clk;
	inb[].clk				= clk;
	inc[].clk				= clk;
	ind[].clk				= clk;
	
	hl_edge.(clk, clrn)		= (clk, !reset);
	lh_edge.(clk, clrn)		= (clk, !reset);

	ina[].d					= in[];
	inb[].d					= ina[].q;
	inc[].d					= inb[].q;
	ind[].d					= inc[].q;
	
	d_greater_a				= ind[] > ina[];
	
	if( d_greater_a & ((ind[] - ina[]) > dudt[]) )
		THEN	hl_edge.d 		= VCC;
		else	hl_edge.d		= GND;		END IF;		
	
	a_greater_d				= ina[] > ind[];
		
	if( a_greater_d & ((ina[] - ind[]) > dudt[]) )
		THEN	lh_edge.d 		= VCC;
		else	lh_edge.d		= GND;		END IF;		
		
	ct.(clock,	aclr)		= (clk, hl_dec_stm.ct_aclr);

	hl_dec_stm.	(CLK, hl_edge, lh_edge, res)	=
				(clk, hl_edge.q, lh_edge.q, reset);
			
	one						= hl_dec_stm.one;
			
	hl_dec_stm.ct[4..0]		= ct.q[4..0];
	
END;
