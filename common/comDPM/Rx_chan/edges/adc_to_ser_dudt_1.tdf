TITLE "ADC to serial decoder, LAST CHANGE: 2003/08/31";

INCLUDE "GET_DUDT";
INCLUDE "ctup5";

--FUNCTION ONE_DET (CLK, ct[4..0], hl_edge, lh_edge, res)
--	RETURNS (ct_aclr, one);

--FUNCTION ctup5 (clock,	aclr)
--RETURNS (	q[4..0],	cout);

--FUNCTION GET_DUDT (CLK, max_level, min_level, cteq16, cteq4, hl_edge, lh_edge, res, uart_done)
--	RETURNS (ct_aclr, dudt_ena, find_dudt, max_ena, min_ena, rxd);

CONSTANT	DEC_MIN_THR = 22;	-- x4 = 80mV between 3 ADC samples

SUBDESIGN	adc_to_ser_dudt
(
	clk				: INPUT;
	reset			: INPUT;
	uart_done		: INPUT;	
	in[9..0]		: INPUT;	-- Communication ADC, meanvalue over 4 clocks
	low_thr[9..0]	: INPUT;	-- Communication threshold, long cable 
	lrg_thr[9..0]	: INPUT;	-- Communication threshold, short cable 
	
	hl_edge			: OUTPUT;
	lh_edge			: OUTPUT;
	max_ena			: OUTPUT;	-- dudt greater MINLEVEL
	min_ena			: OUTPUT;

	find_dudt		: OUTPUT;

	rxd				: OUTPUT;	-- serial data, 1 clock lengths pulse if ==1
)

VARIABLE

	ina[9..0]		: DFF;		-- I/O register
	inb[9..0]		: DFF;
	inc[9..0]		: DFF;
	ind[9..0]		: DFF;
	
	dudt[9..0]		: DFFE;
	
	max_level		: DFF;
	min_level		: DFF;		
	hl_edge			: DFF;
	lh_edge			: DFF;
	
	a_greater_d		: NODE;
	d_greater_a		: NODE;
	
	ct				: ctup5;	-- 5 bit up counter
	get_dudt_stm	: GET_DUDT;	-- state machine
	
BEGIN

ct.clock					= clk;
ct.aclr						= get_dudt_stm.ct_aclr;

get_dudt_stm.(CLK, max_level, min_level, cteq16,  cteq4,  hl_edge, lh_edge, res, uart_done)	=
			(clk, max_level, min_level, ct.q[4],  ct.q[2], hl_edge, lh_edge, reset, uart_done);
			
	ina[].clk				= clk;
	inb[].clk				= clk;
	inc[].clk				= clk;
	ind[].clk				= clk;

	min_level.(clk, clrn)	= (clk, !reset);
	max_level.(clk, clrn)	= (clk, !reset);
	hl_edge.(clk, clrn)		= (clk, !reset);
	lh_edge.(clk, clrn)		= (clk, !reset);

	ina[].d					= in[];
	inb[].d					= ina[].q;
	inc[].d					= inb[].q;
	ind[].d					= inc[].q;
	
	dudt[].clk				= clk;		
	dudt[].d				= low_thr[] & get_dudt_stm.min_ena
							# lrg_thr[] & get_dudt_stm.max_ena;
							
	dudt[].ena				= get_dudt_stm.dudt_ena;

	d_greater_a				= ind[] > ina[];
	a_greater_d				= ina[] > ind[];
	
	if( a_greater_d & ((ina[] - ind[]) > low_thr[]) )
		THEN	min_level	= VCC;
		else	min_level	= GND;		END IF;		

	if( a_greater_d & ((ina[] - ind[]) > lrg_thr[]) )
		THEN	max_level	= VCC;
		else	max_level	= GND;		END IF;		
	
	if( d_greater_a & ((ind[] - ina[]) > dudt[]) )
		THEN	hl_edge		= VCC;
		else	hl_edge		= GND;		END IF;		
		
	if( a_greater_d & ((ina[] - ind[]) > dudt[]) )
		THEN	lh_edge		= VCC;
		else	lh_edge		= GND;		END IF;		
		
	rxd						= get_dudt_stm.rxd;
	find_dudt				= get_dudt_stm.find_dudt;
			
	max_ena					= get_dudt_stm.max_ena;	-- test signals
	min_ena					= get_dudt_stm.min_ena;
	
END;
