% C:\PROJECTS\ICECUBE\DOR\FPGA\DCOM_01\RX_CHAN\EDGES\HL_CTDEC.tdf %
% AHDL code created by Visual Software Solution's StateCAD 4.11 %
% Mon Jun 21 17:47:18 2004 %

% This AHDL code was generated using: %
%  binary encoded state assignment with structured code format. %
%  Minimization is enabled,  implied else is enabled,  %
%  and outputs are speed optimized. %

SUBDESIGN HL_CTDEC(
	CLK :	INPUT;
	big_lh :	INPUT;
	big_signal :	INPUT;
	ct0 :	INPUT;
	ct1 :	INPUT;
	ct2 :	INPUT;
	res :	INPUT;
	small_hl :	INPUT;
	small_lh :	INPUT;
	small_signal :	INPUT;
	ct_aclr :	OUTPUT;
	ct_clk_en :	OUTPUT;
	maxen :	OUTPUT;
	minen :	OUTPUT;
	one :	OUTPUT;
)


VARIABLE
	sreg : MACHINE OF BITS (SV0, SV4, SV5)
		WITH STATES (
			IDLE =	B"001",
			CNTUP =	B"000",
			LHWT1 =	B"010",
			LHWT2 =	B"011",
			STB1 =	B"100",
			STB2 =	B"101"
		);

	ct_aclr :	DFF;
	ct_clk_en :	DFF;
	maxen :	DFF;
	minen :	DFF;
	one :	DFF;

	cteq3 :	NODE;
	cteq6 :	NODE;
BEGIN

% Clock setup %
	ct_aclr.clk=CLK;
	ct_clk_en.clk=CLK;
	maxen.clk=CLK;
	minen.clk=CLK;
	one.clk=CLK;
	sreg.clk=CLK;

	sreg.reset =  res ;

	IF ( res ) THEN
		ct_clk_en.clrn=GND;
		ct_aclr.prn=GND;
		maxen.prn=GND;
		minen.clrn=GND;
		one.clrn=GND;
	ELSE
		ct_clk_en.clrn=VCC;
		ct_aclr.prn=VCC;
		maxen.prn=VCC;
		minen.clrn=VCC;
		one.clrn=VCC;
	END IF;

	CASE sreg IS
		WHEN CNTUP =>
			IF ( small_hl & !cteq6 & !cteq3  #  small_hl & big_signal & !small_signal 
				& !cteq3  #  small_hl & !cteq6 & !big_signal ) THEN 
				sreg = CNTUP;
				(ct_clk_en,ct_aclr,maxen,minen,one)=(1,0,0,1,0);
			END IF;
			IF ( !small_hl  #  cteq6 & !small_signal & !big_signal ) THEN 
				sreg = IDLE;
				(ct_clk_en,ct_aclr,maxen,minen,one)=(0,1,1,0,0);
			END IF;
			IF ( cteq6 & small_signal & small_hl ) THEN 
				sreg = STB2;
				(ct_clk_en,ct_aclr,maxen,minen,one)=(0,0,0,0,1);
			END IF;
			IF ( cteq3 & big_signal & small_hl ) THEN 
				sreg = STB1;
				(ct_clk_en,ct_aclr,maxen,minen,one)=(0,0,0,0,1);
			END IF;
		WHEN IDLE =>
			IF ( small_hl ) THEN 
				sreg = CNTUP;
				(ct_clk_en,ct_aclr,maxen,minen,one)=(1,0,0,1,0);
			ELSE
				sreg = IDLE;
				(ct_clk_en,ct_aclr,maxen,minen,one)=(0,1,1,0,0);
			END IF;
		WHEN LHWT1 =>
			IF ( big_lh ) THEN 
				sreg = IDLE;
				(ct_clk_en,ct_aclr,maxen,minen,one)=(0,1,1,0,0);
			ELSE
				sreg = LHWT1;
				(ct_clk_en,ct_aclr,maxen,minen,one)=(0,1,0,0,0);
			END IF;
		WHEN LHWT2 =>
			IF ( small_lh ) THEN 
				sreg = IDLE;
				(ct_clk_en,ct_aclr,maxen,minen,one)=(0,1,1,0,0);
			ELSE
				sreg = LHWT2;
				(ct_clk_en,ct_aclr,maxen,minen,one)=(0,1,0,0,0);
			END IF;
		WHEN STB1 =>
			sreg = LHWT1;
			(ct_clk_en,ct_aclr,maxen,minen,one)=(0,1,0,0,0);
		WHEN STB2 =>
			sreg = LHWT2;
			(ct_clk_en,ct_aclr,maxen,minen,one)=(0,1,0,0,0);
	END CASE;


% Logic Equations %
cteq3 =  !ct2 & ct1 & ct0 ;

cteq6 =  ct2 & ct1 & !ct0 ;

END;
