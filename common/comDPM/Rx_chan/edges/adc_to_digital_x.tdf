TITLE "ADC to digital decoder";

INCLUDE "HL_DEC";
INCLUDE "ctup5";

--FUNCTION ctup5 (clock,	aclr)
--RETURNS (	q[4..0],	cout);

--FUNCTION HL_DEC (CLK, ct[4..0], hl_edge, lh_edge, new_thr, one_lev, res)
--	RETURNS (ct_aclr, diffen, maxen, one, threna, thrinit);

CONSTANT	DEC_MIN_THR = 20;

SUBDESIGN	adc_to_digital



(
	clk				: INPUT;
	reset			: INPUT;	
	in[9..2]		: INPUT;	-- Communication ADC, bits 0..1 unused  
		
	hl_edge			: OUTPUT;
	lh_edge			: OUTPUT;
	
	one				: OUTPUT;	-- logic one, 1 clock lengths pulse
	
	dec_thr[6..0]	: OUTPUT;	-- for test purposes
	dec_thr_ena		: OUTPUT;	-- for test purposes
)

VARIABLE

	ina[7..0]		: DFF;		-- I/O register
	inb[7..0]		: DFF;
	
	max[7..0]		: DFFE;
	diff[7..0]		: DFFE;
	
	dec_thr[6..0]	: DFFE;
	
	hl_edge			: DFF;
	lh_edge			: DFF;
	
	agb[2..0]		: DFF;
	bga[2..0]		: DFF;
	
	one_level		: NODE;		-- hl_edge >   dec_thr
	new_thr			: NODE;		-- hl_edge > 2*dec_thr
	ct				: ctup5;	-- 5 bit up counter
	edgdec			: HL_DEC;	-- state machine
	
BEGIN
	ina[].clk				= clk;
	inb[].clk				= clk;
	max[].clk				= clk;
	diff[].clk				= clk;
	dec_thr[].clk			= clk;
	
	ina[].d					= in[];
	inb[].d					= ina[].q;
	
	hl_edge.(clk, clrn)		= (clk, !reset);
	lh_edge.(clk, clrn)		= (clk, !reset);
	agb[2..0].(clk, clrn)	= (clk, !reset);
	bga[2..0].(clk, clrn)	= (clk, !reset);
	
	if(inb[] > ina[])
		THEN	bga[0] 		= VCC;
		else	bga[0]		= GND;		END IF;
		
	bga[1].d				= bga[0].q;	
	bga[2].d				= bga[1].q;
	
	hl_edge.d				= bga[2..0].q == 7;
	
	if(ina[] > inb[])
		THEN	agb[0] 		= VCC;
		else	agb[0]		= GND;		END IF;
		
	agb[1].d				= agb[0].q;	
	agb[2].d				= agb[1].q;
	
	lh_edge.d				= agb[2..0].q == 7;
	
	max[].d					= inb[].q;
	max[].ena				= edgdec.maxen;
	
	diff[].d				= max[].q - ina[].q;
	diff[].ena				= edgdec.diffen;
	
	one_level				= diff[] > (GND, dec_thr[]);
													-- new threshold if diff[] > 2*dec_thr[]
	new_thr					= diff[] > (dec_thr[6..0].q, GND);
	
	dec_thr[].(clk, ena)	= (clk, edgdec.threna);
	dec_thr[].d				= (GND, diff[7..1].q)	& edgdec.threna # -- take half of diff[]
								DEC_MIN_THR			& edgdec.thrinit;
	
	
	ct.(clock,	aclr)		= (clk, edgdec.ct_aclr);

	edgdec.	(CLK, hl_edge, lh_edge, new_thr, one_lev, res)	=
			(clk, hl_edge, lh_edge, new_thr, one_lev, reset);
			
	one						= edgdec.one;
			
	edgdec.ct[4..0]			= ct.q[4..0];
	
	dec_thr_ena				= edgdec.threna;
	
	
END;
