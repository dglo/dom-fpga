TITLE "ADC to digital decoder";

--INCLUDE "dec_shrg";

CONSTANT NOISE_LEVEL = 4;
CONSTANT DEC_MIN_THR = 20;

--FUNCTION dec_shrg (clock,	enable,	load,	data[7..0])
--	RETURNS (	q[9..0]);

SUBDESIGN adc_to _digital

(
	clk				: INPUT;
	reset			: INPUT;	
	in[9..2]		: INPUT;	-- Communication ADC, bits 0..1 unused  
		
	hl_edge			: OUTPUT;
	lh_edge			: OUTPUT;
	
	one_level		: OUTPUT;	-- hl_edge >   dec_thr
	new_thr			: OUTPUT;	-- hl_edge > 2*dec_thr		
	one				: OUTPUT;	-- logic one, 1 clock lengths pulse
	
	
	dec_thr[6..0]	: OUTPUT;
)

VARIABLE

	inrg[7..0]		: DFF;		-- I/O register
	ina[7..0]		: DFF;
	inb[7..0]		: DFF;
	
	max[7..0]		: DFFE;
	diff[7..0]		: DFFE;
	
	dec_thr[6..0]	: DFFE;
	
	hl_edge			: DFF;
	lh_edge			: DFF;
	
	agb[2..0]		: DFF;
	bga[2..0]		: DFF;
	
	one_level		: NODE;
	new_thr			: NODE;
	
BEGIN
	inrg[].clk				= !clk;	-- hl clock edge used
	
	ina[].clk				= clk;
	inb[].clk				= clk;
	
	inrg[].d				= in[9..2];	
	ina[].d					= inrg[].q;
	inb[].d					= ina[].q;
	
	hl_edge.(clk, clrn)		= (clk, !reset);
	lh_edge.(clk, clrn)		= (clk, !reset);
	agb[2..0].(clk, clrn)	= (clk, !reset);
	bga[2..0].(clk, clrn)	= (clk, !reset);
	
	max[].clk				= clk;
	diff[].clk				= clk;
	dec_thr[].clk			= clk;
	
	if((inb[] > ina[]) & ((inb[]-ina[]) > NOISE_LEVEL))
		THEN	bga[0] 		= VCC;
		else	bga[0]		= GND;		END IF;
		
	bga[1].d				= bga[0].q;	
	bga[2].d				= bga[1].q;
	
	hl_edge.d				= bga[2..0].q == 7;
	
	if((ina[] > inb[]) & ((ina[]-inb[]) > NOISE_LEVEL))
		THEN	agb[0] 		= VCC;
		else	agb[0]		= GND;		END IF;
		
	agb[1].d				= agb[0].q;	
	agb[2].d				= agb[1].q;
	
	lh_edge.d				= agb[2..0].q == 7;
	
	max[].d					= inb[].q;
	max[].ena				= edgdec.maxen;
	
	diff[].d				= max[].q - ina[].q;
	diff[].ena				= edgdec.diffen;
	
	one_level				= diff[] > (GND, dec_thr[]);
													-- new threshold if diff[] > 2*dec_thr[]
	new_thr					= diff[] > (dec_thr[6..0].q, GND);
	
	dec_thr[].(clk, ena)	= (clk, edgdec.threna);
	dec_thr[].d				= (GND, diff[7..1].q)	& edgdec.threna # -- take diff[]/2
									DEC_MIN_THR		& edgdec.thrinit;
	
		
END;
