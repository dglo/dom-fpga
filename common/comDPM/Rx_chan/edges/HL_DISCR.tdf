% C:\PROJECTS\ICECUBE\DOR\FPGA\DCOM_01\RX_CHAN\EDGES\HL_DISCR.tdf %
% AHDL code created by Visual Software Solution's StateCAD 4.11 %
% Sun Jun 27 16:06:13 2004 %

% This AHDL code was generated using: %
%  binary encoded state assignment with structured code format. %
%  Minimization is enabled,  implied else is enabled,  %
%  and outputs are speed optimized. %

SUBDESIGN HL_DISCR(
	CLK :	INPUT;
	ct0 :	INPUT;
	ct1 :	INPUT;
	ct2 :	INPUT;
	ct3 :	INPUT;
	low_hl :	INPUT;
	low_lev :	INPUT;
	lrg_hl :	INPUT;
	lrg_lev :	INPUT;
	res :	INPUT;
	ct_aclr :	OUTPUT;
	lowsig :	OUTPUT;
	lrgsig :	OUTPUT;
	maxen :	OUTPUT;
	one :	OUTPUT;
)


VARIABLE
	sreg : MACHINE OF BITS (SV0, SV4, SV5)
		WITH STATES (
			AAA =	B"000",
			CNT1 =	B"001",
			CNT2 =	B"010",
			STB =	B"011",
			WT =	B"100"
		);

	ct_aclr :	DFF;
	lowsig :	DFF;
	lrgsig :	DFF;
	maxen :	DFF;
	one :	DFF;

	cteq00xx :	NODE;
	cteq01xx :	NODE;
	cteq4 :	NODE;
	cteq8 :	NODE;
	cteq15 :	NODE;
BEGIN

% Clock setup %
	ct_aclr.clk=CLK;
	lowsig.clk=CLK;
	lrgsig.clk=CLK;
	maxen.clk=CLK;
	one.clk=CLK;
	sreg.clk=CLK;

	sreg.reset =  res ;

	IF ( res ) THEN
		lowsig.clrn=GND;
		ct_aclr.prn=GND;
		maxen.prn=GND;
		lrgsig.clrn=GND;
		one.clrn=GND;
	ELSE
		lowsig.clrn=VCC;
		ct_aclr.prn=VCC;
		maxen.prn=VCC;
		lrgsig.clrn=VCC;
		one.clrn=VCC;
	END IF;

	CASE sreg IS
		WHEN AAA =>
			IF ( !low_hl & !lrg_hl ) THEN 
				sreg = AAA;
				(lowsig,ct_aclr,maxen,lrgsig,one)=(0,1,1,0,0);
			END IF;
			IF ( low_hl & !lrg_hl ) THEN 
				sreg = CNT1;
				(lowsig,ct_aclr,maxen,lrgsig,one)=(1,0,0,0,0);
			END IF;
			IF ( lrg_hl ) THEN 
				sreg = CNT2;
				(lowsig,ct_aclr,maxen,lrgsig,one)=(0,0,0,1,0);
			END IF;
		WHEN CNT1 =>
			IF ( low_hl & !cteq8 & !low_lev & !lrg_hl  #  low_hl & !cteq8 & !cteq01xx 
				& !lrg_hl  #  low_lev & !cteq8 & !cteq01xx & !lrg_hl  #  low_lev & !cteq8 & !
				cteq01xx & !low_hl  #  low_hl & !cteq8 & !low_lev & !cteq00xx  #  low_hl & !
				cteq8 & !cteq01xx & !cteq00xx  #  low_lev & !cteq8 & !cteq01xx & !cteq00xx ) 
				THEN 
				sreg = CNT1;
				(lowsig,ct_aclr,maxen,lrgsig,one)=(1,0,0,0,0);
			END IF;
			IF ( !low_lev & !low_hl  #  cteq8 ) THEN 
				sreg = AAA;
				(lowsig,ct_aclr,maxen,lrgsig,one)=(0,1,1,0,0);
			END IF;
			IF ( low_lev & cteq01xx ) THEN 
				sreg = WT;
				(lowsig,ct_aclr,maxen,lrgsig,one)=(0,0,0,0,0);
			END IF;
			IF ( lrg_hl & low_hl & cteq00xx ) THEN 
				sreg = CNT2;
				(lowsig,ct_aclr,maxen,lrgsig,one)=(0,0,0,1,0);
			END IF;
		WHEN CNT2 =>
			IF ( !low_hl & lrg_hl & !cteq4 & !lrg_lev ) THEN 
				sreg = CNT2;
				(lowsig,ct_aclr,maxen,lrgsig,one)=(0,0,0,1,0);
			END IF;
			IF ( low_hl & !cteq4 & !lrg_lev ) THEN 
				sreg = CNT1;
				(lowsig,ct_aclr,maxen,lrgsig,one)=(1,0,0,0,0);
			END IF;
			IF ( !lrg_hl & !low_hl & !lrg_lev  #  cteq4 & !lrg_lev ) THEN 
				sreg = AAA;
				(lowsig,ct_aclr,maxen,lrgsig,one)=(0,1,1,0,0);
			END IF;
			IF ( lrg_lev ) THEN 
				sreg = WT;
				(lowsig,ct_aclr,maxen,lrgsig,one)=(0,0,0,0,0);
			END IF;
		WHEN STB =>
			sreg = AAA;
			(lowsig,ct_aclr,maxen,lrgsig,one)=(0,1,1,0,0);
		WHEN WT =>
			IF ( cteq15 ) THEN 
				sreg = STB;
				(lowsig,ct_aclr,maxen,lrgsig,one)=(0,0,0,0,1);
			ELSE
				sreg = WT;
				(lowsig,ct_aclr,maxen,lrgsig,one)=(0,0,0,0,0);
			END IF;
	END CASE;


% Logic Equations %
cteq00xx =  !ct3 & !ct2 ;

cteq01xx =  !ct3 & ct2 ;

cteq4 =  !ct3 & ct2 & !ct1 & !ct0 ;

cteq8 =  ct3 & !ct2 & !ct1 & !ct0 ;

cteq15 =  ct3 & ct2 & ct1 & ct0 ;

END;
