TITLE "ADC to Serial Decoder, Rev.01";

INCLUDE	"edge_dec";
INCLUDE "ctup5";

--FUNCTION EDGE_DEC (CLK, ct[4..0], hl_edge, lh_edge, one_lev, res)
--	RETURNS (ct_aclr, end_en, one, start_en, hl_en, lh_en);

--FUNCTION ctup5 (	clock,	aclr)
--	RETURNS (	q[4..0],	cout);


SUBDESIGN adc2ser_dec_01
(
	dudt[9..0]		: INPUT;
	dec_thr[9..0]	: INPUT;
	in[9..0]		: INPUT;
		
	clk				: INPUT;
	reset			: INPUT;	
		
	hl_edge			: OUTPUT;
	lh_edge			: OUTPUT;
	
	rxd				: OUTPUT;	-- strobe of one clock length if 
								-- logic one has been detected
		
)

VARIABLE
	ina[9..0]		: DFF;
	inb[9..0]		: DFF;
	inc[9..0]		: DFF;
	ind[9..0]		: DFFE;
	
	hl_edge			: DFF;
	lh_edge			: DFF;
	one_lev			: DFF;
		
	edgstm			: edge_dec;
	ct				: ctup5;
	
BEGIN

	ct.(clock, aclr)		= (clk, edgstm.ct_aclr);
	
	ina[9..0].(clk, clrn)	= (clk, !reset);
	inb[9..0].(clk, clrn)	= (clk, !reset);
	inc[9..0].(clk, clrn)	= (clk, !reset);
	ind[9..0].(clk, clrn)	= (clk, !reset);
	
	ind[9..0].ena			= edgstm.start_en;
			
	ina[9..0].d				= in[9..0];
	inb[9..0].d				= ina[9..0].q;
	inc[9..0].d				= inb[9..0].q;
	ind[9..0].d				= inc[9..0].q;
	
	hl_edge.(clk, clrn)		= (clk, !reset);
	lh_edge.(clk, clrn)		= (clk, !reset);
	one_lev.(clk, clrn)		= (clk, !reset);
			
	if((inc[] > ina[]) & ((inc[]-ina[]) > dudt[]))
		THEN	hl_edge = VCC;
		else	hl_edge	= GND;		END IF;
		
	if((ina[] > inc[]) & ((ina[]-inc[]) > dudt[]))
		THEN	lh_edge = VCC;
		else	lh_edge	= GND;		END IF;
		
	if(edgstm.hl_en & ((ind[]-ina[]) > dec_thr[]))
		THEN	one_lev	= VCC;
		else	one_lev	= GND;		END IF;
		
	if(edgstm.lh_en & ((ina[]-ind[]) > dec_thr[]))
		THEN	one_lev	= VCC;
		else	one_lev	= GND;		END IF;
					
	edgstm.(CLK, hl_edge, lh_edge, one_lev, res)
			= (clk, hl_edge, lh_edge, one_lev, reset);
			
	edgstm.ct[4..0]	= ct.q[4..0];
	
	rxd		= edgstm.one;
	
END;
