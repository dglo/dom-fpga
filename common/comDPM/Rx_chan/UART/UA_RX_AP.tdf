% C:\PROJECTS\ICECUBE\DOR\FPGA\DCOM_01\RX_CHAN\UART\UA_RX_AP.tdf %
% AHDL code created by Visual Software Solution's StateCAD 4.11 %
% Thu Jul 15 08:03:33 2004 %

% This AHDL code was generated using: %
%  binary encoded state assignment with structured code format. %
%  Minimization is enabled,  implied else is enabled,  %
%  and outputs are speed optimized. %

SUBDESIGN UA_RX_AP(
	CLK :	INPUT;
	res :	INPUT;
	rxct[4..0] :	INPUT;
	rxd :	INPUT;
	rxdata[7..0] :	INPUT;
	rxlast :	INPUT;
	ctclr :	OUTPUT;
	data_stb :	OUTPUT;
	eof_stb :	OUTPUT;
	err_stb :	OUTPUT;
	shd :	OUTPUT;
	shen :	OUTPUT;
	stf_stb :	OUTPUT;
)


VARIABLE
	sreg : MACHINE OF BITS (SV0, SV1, SV3, SV4)
		WITH STATES (
			RXIDLE =	B"0101",
			DAT_WT =	B"0000",
			DATA =	B"0001",
			EOF =	B"0010",
			ERROR =	B"0011",
			RXDAT =	B"0100",
			RXSTART =	B"0110",
			RXSTOP =	B"0111",
			SHFT0 =	B"1000",
			SHFT1 =	B"1001",
			SHFT_WT =	B"1010",
			STF =	B"1011",
			WT =	B"1100"
		);

	ctclr :	DFF;
	data_stb :	DFF;
	eof_stb :	DFF;
	err_stb :	DFF;
	shd :	DFF;
	shen :	DFF;
	stf_stb :	DFF;

	rxcteq5 :	NODE;
	rxcteq9 :	NODE;
BEGIN

% Clock setup %
	ctclr.clk=CLK;
	data_stb.clk=CLK;
	eof_stb.clk=CLK;
	err_stb.clk=CLK;
	shd.clk=CLK;
	shen.clk=CLK;
	stf_stb.clk=CLK;
	sreg.clk=CLK;

	sreg.reset =  res ;

	IF ( res ) THEN
		err_stb.clrn=GND;
		eof_stb.clrn=GND;
		stf_stb.clrn=GND;
		data_stb.clrn=GND;
		shen.clrn=GND;
		shd.clrn=GND;
		ctclr.prn=GND;
	ELSE
		err_stb.clrn=VCC;
		eof_stb.clrn=VCC;
		stf_stb.clrn=VCC;
		data_stb.clrn=VCC;
		shen.clrn=VCC;
		shd.clrn=VCC;
		ctclr.prn=VCC;
	END IF;

	CASE sreg IS
		WHEN DAT_WT =>
			IF ( rxcteq5 ) THEN 
				sreg = DATA;
				(err_stb,eof_stb,stf_stb,data_stb,shen,shd,ctclr)=(0,0,0,1,0,0,0);
			ELSE
				sreg = DAT_WT;
				(err_stb,eof_stb,stf_stb,data_stb,shen,shd,ctclr)=(0,0,0,0,0,0,0);
			END IF;
		WHEN DATA =>
			sreg = RXIDLE;
			(err_stb,eof_stb,stf_stb,data_stb,shen,shd,ctclr)=(0,0,0,0,0,0,1);
		WHEN EOF =>
			sreg = RXIDLE;
			(err_stb,eof_stb,stf_stb,data_stb,shen,shd,ctclr)=(0,0,0,0,0,0,1);
		WHEN ERROR =>
			sreg = RXIDLE;
			(err_stb,eof_stb,stf_stb,data_stb,shen,shd,ctclr)=(0,0,0,0,0,0,1);
		WHEN RXDAT =>
			IF ( !rxd & !rxcteq5 ) THEN 
				sreg = RXDAT;
				(err_stb,eof_stb,stf_stb,data_stb,shen,shd,ctclr)=(0,0,0,0,0,0,0);
			END IF;
			IF ( rxd & !rxcteq5 ) THEN 
				sreg = SHFT_WT;
				(err_stb,eof_stb,stf_stb,data_stb,shen,shd,ctclr)=(0,0,0,0,0,0,0);
			END IF;
			IF ( rxcteq5 & !rxd ) THEN 
				sreg = SHFT0;
				(err_stb,eof_stb,stf_stb,data_stb,shen,shd,ctclr)=(0,0,0,0,1,0,0);
			END IF;
			IF ( rxd & rxcteq5 ) THEN 
				sreg = SHFT1;
				(err_stb,eof_stb,stf_stb,data_stb,shen,shd,ctclr)=(0,0,0,0,1,1,0);
			END IF;
		WHEN RXIDLE =>
			IF ( rxd ) THEN 
				sreg = RXSTART;
				(err_stb,eof_stb,stf_stb,data_stb,shen,shd,ctclr)=(0,0,0,0,0,0,0);
			ELSE
				sreg = RXIDLE;
				(err_stb,eof_stb,stf_stb,data_stb,shen,shd,ctclr)=(0,0,0,0,0,0,1);
			END IF;
		WHEN RXSTART =>
			IF ( rxcteq9 ) THEN 
				sreg = RXDAT;
				(err_stb,eof_stb,stf_stb,data_stb,shen,shd,ctclr)=(0,0,0,0,0,0,0);
			ELSE
				sreg = RXSTART;
				(err_stb,eof_stb,stf_stb,data_stb,shen,shd,ctclr)=(0,0,0,0,0,0,0);
			END IF;
		WHEN RXSTOP =>
			IF ( !rxd & !rxcteq5 ) THEN 
				sreg = RXSTOP;
				(err_stb,eof_stb,stf_stb,data_stb,shen,shd,ctclr)=(0,0,0,0,0,0,0);
			END IF;
			IF ( rxd & !rxcteq5 ) THEN 
				sreg = DAT_WT;
				(err_stb,eof_stb,stf_stb,data_stb,shen,shd,ctclr)=(0,0,0,0,0,0,0);
			END IF;
			IF ( rxdata7 & !rxdata6 & !rxdata5 & rxdata4 & rxdata3 & !rxdata2 & !
				rxdata1 & rxdata0 & rxcteq5 & !rxd ) THEN 
				sreg = EOF;
				(err_stb,eof_stb,stf_stb,data_stb,shen,shd,ctclr)=(0,1,0,0,0,0,0);
			END IF;
			IF ( rxdata7 & rxdata6 & rxdata5 & !rxdata4 & !rxdata3 & !rxdata2 & 
				rxdata1 & rxdata0 & rxcteq5 & !rxd ) THEN 
				sreg = STF;
				(err_stb,eof_stb,stf_stb,data_stb,shen,shd,ctclr)=(0,0,1,0,0,0,0);
			END IF;
			IF ( rxd & rxcteq5 ) THEN 
				sreg = DATA;
				(err_stb,eof_stb,stf_stb,data_stb,shen,shd,ctclr)=(0,0,0,1,0,0,0);
			END IF;
			IF ( !rxdata0 & rxcteq5 & !rxd  #  rxdata6 & !rxdata1 & rxcteq5 & !rxd  # 
				 rxdata5 & !rxdata1 & rxcteq5 & !rxd  #  !rxdata4 & !rxdata1 & rxcteq5 & !rxd
				  #  !rxdata3 & !rxdata1 & rxcteq5 & !rxd  #  rxdata2 & rxcteq5 & !rxd  #  
				rxdata6 & rxdata3 & rxcteq5 & !rxd  #  rxdata5 & rxdata3 & rxcteq5 & !rxd  # 
				 !rxdata4 & rxdata3 & rxcteq5 & !rxd  #  rxdata1 & rxdata3 & rxcteq5 & !rxd  
				#  rxdata6 & rxdata4 & rxcteq5 & !rxd  #  rxdata5 & rxdata4 & rxcteq5 & !rxd 
				 #  !rxdata3 & rxdata4 & rxcteq5 & !rxd  #  rxdata1 & rxdata4 & rxcteq5 & !
				rxd  #  rxdata6 & !rxdata5 & rxcteq5 & !rxd  #  !rxdata4 & !rxdata5 & rxcteq5
				 & !rxd  #  !rxdata3 & !rxdata5 & rxcteq5 & !rxd  #  rxdata1 & !rxdata5 & 
				rxcteq5 & !rxd  #  rxdata5 & !rxdata6 & rxcteq5 & !rxd  #  !rxdata4 & !
				rxdata6 & rxcteq5 & !rxd  #  !rxdata3 & !rxdata6 & rxcteq5 & !rxd  #  rxdata1
				 & !rxdata6 & rxcteq5 & !rxd  #  !rxdata7 & rxcteq5 & !rxd ) THEN 
				sreg = ERROR;
				(err_stb,eof_stb,stf_stb,data_stb,shen,shd,ctclr)=(1,0,0,0,0,0,0);
			END IF;
		WHEN SHFT0 =>
			sreg = WT;
			(err_stb,eof_stb,stf_stb,data_stb,shen,shd,ctclr)=(0,0,0,0,0,0,0);
		WHEN SHFT1 =>
			sreg = WT;
			(err_stb,eof_stb,stf_stb,data_stb,shen,shd,ctclr)=(0,0,0,0,0,0,0);
		WHEN SHFT_WT =>
			IF ( rxcteq5 ) THEN 
				sreg = SHFT1;
				(err_stb,eof_stb,stf_stb,data_stb,shen,shd,ctclr)=(0,0,0,0,1,1,0);
			ELSE
				sreg = SHFT_WT;
				(err_stb,eof_stb,stf_stb,data_stb,shen,shd,ctclr)=(0,0,0,0,0,0,0);
			END IF;
		WHEN STF =>
			sreg = RXIDLE;
			(err_stb,eof_stb,stf_stb,data_stb,shen,shd,ctclr)=(0,0,0,0,0,0,1);
		WHEN WT =>
			IF ( !rxcteq9 ) THEN 
				sreg = WT;
				(err_stb,eof_stb,stf_stb,data_stb,shen,shd,ctclr)=(0,0,0,0,0,0,0);
			END IF;
			IF ( rxlast & rxcteq9 ) THEN 
				sreg = RXSTOP;
				(err_stb,eof_stb,stf_stb,data_stb,shen,shd,ctclr)=(0,0,0,0,0,0,0);
			END IF;
			IF ( !rxlast & rxcteq9 ) THEN 
				sreg = RXDAT;
				(err_stb,eof_stb,stf_stb,data_stb,shen,shd,ctclr)=(0,0,0,0,0,0,0);
			END IF;
	END CASE;


% Logic Equations %
rxcteq5 =  !rxct4 & !rxct3 & rxct2 & !rxct1 & rxct0 ;

rxcteq9 =  !rxct4 & rxct3 & !rxct2 & !rxct1 & rxct0 ;

END;
