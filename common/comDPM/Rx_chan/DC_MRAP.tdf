% C:\PROJECTS\ICECUBE\DOR\FPGA\DCOM_01\RX_CHAN\DC_MRAP.tdf %
% AHDL code created by Visual Software Solution's StateCAD 4.11 %
% Fri Jul 09 09:43:10 2004 %

% This AHDL code was generated using: %
%  one-hot state assignment with boolean code format. %
%  Minimization is enabled,  implied else is enabled,  %
%  and outputs are area optimized. %

SUBDESIGN DC_MRAP(
	CLK :	INPUT;
	crc_zero :	INPUT;
	ctrl_msg :	INPUT;
	data_msg :	INPUT;
	data_stb :	INPUT;
	eof_stb :	INPUT;
	RESET :	INPUT;
	stf_stb :	INPUT;
	byte_ena0a :	OUTPUT;
	byte_ena0b :	OUTPUT;
	byte_ena1 :	OUTPUT;
	byte_ena2 :	OUTPUT;
	byte_ena3 :	OUTPUT;
	cmd_ena :	OUTPUT;
	crc_init :	OUTPUT;
	ctrl_error :	OUTPUT;
	ctrl_rcvd :	OUTPUT;
	data_error :	OUTPUT;
	data_rcvd :	OUTPUT;
	first_wadr_ena :	OUTPUT;
	first_wadr_rld :	OUTPUT;
	msg_type_ena :	OUTPUT;
	rx_we :	OUTPUT;
	seq0_byte :	OUTPUT;
	seq1_byte :	OUTPUT;
)


VARIABLE
	BYTE0 :	DFF;
	BYTE1 :	DFF;
	BYTE2 :	DFF;
	BYTE3 :	DFF;
	CTR_ERR :	DFF;
	CTR_MSG :	DFF;
	CTRL_OK :	DFF;
	DAT_ERR :	DFF;
	DAT_MSG :	DFF;
	DATA_OK :	DFF;
	DCMD_SEQ1 :	DFF;
	DPR_DAT_WR :	DFF;
	EOF_WAIT :	DFF;
	IDLE :	DFF;
	LEN0 :	DFF;
	MTYPE_LEN1 :	DFF;
	PTYPE_SEQ0 :	DFF;
	START :	DFF;
	STF_WAIT :	DFF;

BEGIN

% Clock setup %
	BYTE0.clk=CLK;
	BYTE1.clk=CLK;
	BYTE2.clk=CLK;
	BYTE3.clk=CLK;
	CTR_ERR.clk=CLK;
	CTR_MSG.clk=CLK;
	CTRL_OK.clk=CLK;
	DAT_ERR.clk=CLK;
	DAT_MSG.clk=CLK;
	DATA_OK.clk=CLK;
	DCMD_SEQ1.clk=CLK;
	DPR_DAT_WR.clk=CLK;
	EOF_WAIT.clk=CLK;
	IDLE.clk=CLK;
	LEN0.clk=CLK;
	MTYPE_LEN1.clk=CLK;
	PTYPE_SEQ0.clk=CLK;
	START.clk=CLK;
	STF_WAIT.clk=CLK;

BYTE0 =  !eof_stb & !data_stb & !stf_stb & BYTE0  #  !stf_stb & data_stb & 
	BYTE3  #  !stf_stb & data_stb & data_msg & DCMD_SEQ1 ;

BYTE1 =  !data_stb & !stf_stb & BYTE1  #  !stf_stb & DPR_DAT_WR ;

BYTE2 =  !stf_stb & data_stb & BYTE1  #  !data_stb & !stf_stb & BYTE2 ;

BYTE3 =  !stf_stb & data_stb & BYTE2  #  !data_stb & !stf_stb & BYTE3 ;

CTRL_OK =  !stf_stb & eof_stb & crc_zero & EOF_WAIT ;

DATA_OK =  !stf_stb & eof_stb & crc_zero & BYTE0 ;

DCMD_SEQ1 =  !data_stb & !stf_stb & DCMD_SEQ1  #  !stf_stb & data_stb & 
	PTYPE_SEQ0 ;

DPR_DAT_WR =  !stf_stb & data_stb & BYTE0 ;

EOF_WAIT =  !stf_stb & data_stb & ctrl_msg & DCMD_SEQ1  #  !eof_stb & !
	stf_stb & EOF_WAIT ;

LEN0 =  !data_stb & !stf_stb & LEN0  #  !stf_stb & START ;

MTYPE_LEN1 =  !stf_stb & data_stb & LEN0  #  !data_stb & !stf_stb & 
	MTYPE_LEN1 ;

PTYPE_SEQ0 =  !stf_stb & data_stb & MTYPE_LEN1  #  !data_stb & !stf_stb & 
	PTYPE_SEQ0 ;

START =  stf_stb ;

STF_WAIT =  !stf_stb & eof_stb & !crc_zero & BYTE0  #  !stf_stb & CTRL_OK  # 
	 !stf_stb & DATA_OK  #  !stf_stb & data_stb & !ctrl_msg & !data_msg & 
	DCMD_SEQ1  #  !stf_stb & eof_stb & !crc_zero & EOF_WAIT  #  !stf_stb & 
	STF_WAIT ;


	IF ( RESET ) THEN
		CTR_ERR.clrn=GND;
		CTR_MSG.clrn=GND;
		DAT_ERR.clrn=GND;
		DAT_MSG.clrn=GND;
		IDLE.prn=GND;
	ELSE
		CTR_ERR.clrn=VCC;
		CTR_MSG.clrn=VCC;
		DAT_ERR.clrn=VCC;
		DAT_MSG.clrn=VCC;
		IDLE.prn=VCC;
	END IF;
CTR_ERR =  stf_stb & CTR_MSG  #  eof_stb & !EOF_WAIT & CTR_MSG  #  eof_stb & 
	!crc_zero & CTR_MSG ;

CTR_MSG =  !eof_stb & !stf_stb & CTR_MSG  #  DCMD_SEQ1 & data_stb & ctrl_msg 
	& IDLE ;

DAT_ERR =  stf_stb & DAT_MSG  #  eof_stb & !BYTE0 & DAT_MSG  #  eof_stb & !
	crc_zero & DAT_MSG ;

DAT_MSG =  !eof_stb & !stf_stb & DAT_MSG  #  DCMD_SEQ1 & data_stb & data_msg 
	& IDLE ;

IDLE =  CTR_ERR  #  EOF_WAIT & eof_stb & crc_zero & CTR_MSG  #  DAT_ERR  #  
	BYTE0 & eof_stb & crc_zero & DAT_MSG  #  !ctrl_msg & !data_msg & IDLE  #  !
	data_stb & IDLE  #  !DCMD_SEQ1 & IDLE ;



(seq1_byte,seq0_byte,ctrl_rcvd,data_rcvd,first_wadr_ena,rx_we,byte_ena0b,
	cmd_ena,msg_type_ena,crc_init,byte_ena3,byte_ena2,byte_ena1,byte_ena0a)= (  (
	 BYTE0, BYTE0, BYTE0, BYTE0, BYTE0, BYTE0, BYTE0, BYTE0, BYTE0, BYTE0, BYTE0,
	 BYTE0, BYTE0, BYTE0) & ((0,0,0,0,0,0,0,0,0,0,0,0,0,1) ) ) # (  ( BYTE1, 
	BYTE1, BYTE1, BYTE1, BYTE1, BYTE1, BYTE1, BYTE1, BYTE1, BYTE1, BYTE1, BYTE1, 
	BYTE1, BYTE1) & ((0,0,0,0,0,0,1,0,0,0,0,0,1,0) ) ) # (  ( BYTE2, BYTE2, BYTE2
	, BYTE2, BYTE2, BYTE2, BYTE2, BYTE2, BYTE2, BYTE2, BYTE2, BYTE2, BYTE2, BYTE2
	) & ((0,0,0,0,0,0,0,0,0,0,0,1,0,0) ) ) # (  ( BYTE3, BYTE3, BYTE3, BYTE3, 
	BYTE3, BYTE3, BYTE3, BYTE3, BYTE3, BYTE3, BYTE3, BYTE3, BYTE3, BYTE3) & ((0,0
	,0,0,0,0,0,0,0,0,1,0,0,0) ) ) # (  ( CTRL_OK, CTRL_OK, CTRL_OK, CTRL_OK, 
	CTRL_OK, CTRL_OK, CTRL_OK, CTRL_OK, CTRL_OK, CTRL_OK, CTRL_OK, CTRL_OK, 
	CTRL_OK, CTRL_OK) & ((0,0,1,0,0,0,0,0,0,0,0,0,0,0) ) ) # (  ( DATA_OK, 
	DATA_OK, DATA_OK, DATA_OK, DATA_OK, DATA_OK, DATA_OK, DATA_OK, DATA_OK, 
	DATA_OK, DATA_OK, DATA_OK, DATA_OK, DATA_OK) & ((0,0,0,1,0,0,0,0,0,0,0,0,0,0)
	 ) ) # (  ( DCMD_SEQ1, DCMD_SEQ1, DCMD_SEQ1, DCMD_SEQ1, DCMD_SEQ1, DCMD_SEQ1,
	 DCMD_SEQ1, DCMD_SEQ1, DCMD_SEQ1, DCMD_SEQ1, DCMD_SEQ1, DCMD_SEQ1, DCMD_SEQ1,
	 DCMD_SEQ1) & ((1,0,0,0,1,0,0,1,0,0,1,0,0,0) ) ) # (  ( DPR_DAT_WR, 
	DPR_DAT_WR, DPR_DAT_WR, DPR_DAT_WR, DPR_DAT_WR, DPR_DAT_WR, DPR_DAT_WR, 
	DPR_DAT_WR, DPR_DAT_WR, DPR_DAT_WR, DPR_DAT_WR, DPR_DAT_WR, DPR_DAT_WR, 
	DPR_DAT_WR) & ((0,0,0,0,0,1,0,0,0,0,0,0,0,0) ) ) # (  ( EOF_WAIT, EOF_WAIT, 
	EOF_WAIT, EOF_WAIT, EOF_WAIT, EOF_WAIT, EOF_WAIT, EOF_WAIT, EOF_WAIT, 
	EOF_WAIT, EOF_WAIT, EOF_WAIT, EOF_WAIT, EOF_WAIT) & ((0,0,0,0,0,0,0,0,0,0,0,0
	,0,0) ) ) # (  ( LEN0, LEN0, LEN0, LEN0, LEN0, LEN0, LEN0, LEN0, LEN0, LEN0, 
	LEN0, LEN0, LEN0, LEN0) & ((0,0,0,0,0,0,0,0,0,0,0,0,0,1) ) ) # (  ( 
	MTYPE_LEN1, MTYPE_LEN1, MTYPE_LEN1, MTYPE_LEN1, MTYPE_LEN1, MTYPE_LEN1, 
	MTYPE_LEN1, MTYPE_LEN1, MTYPE_LEN1, MTYPE_LEN1, MTYPE_LEN1, MTYPE_LEN1, 
	MTYPE_LEN1, MTYPE_LEN1) & ((0,0,0,0,0,0,1,0,1,0,0,0,1,0) ) ) # (  ( 
	PTYPE_SEQ0, PTYPE_SEQ0, PTYPE_SEQ0, PTYPE_SEQ0, PTYPE_SEQ0, PTYPE_SEQ0, 
	PTYPE_SEQ0, PTYPE_SEQ0, PTYPE_SEQ0, PTYPE_SEQ0, PTYPE_SEQ0, PTYPE_SEQ0, 
	PTYPE_SEQ0, PTYPE_SEQ0) & ((0,1,0,0,0,0,0,0,0,0,0,1,0,0) ) ) # (  ( START, 
	START, START, START, START, START, START, START, START, START, START, START, 
	START, START) & ((0,0,0,0,0,0,0,0,0,1,0,0,0,1) ) ) # (  ( STF_WAIT, STF_WAIT,
	 STF_WAIT, STF_WAIT, STF_WAIT, STF_WAIT, STF_WAIT, STF_WAIT, STF_WAIT, 
	STF_WAIT, STF_WAIT, STF_WAIT, STF_WAIT, STF_WAIT) & ((0,0,0,0,0,0,0,0,0,1,0,0
	,0,1) ) );

(first_wadr_rld,data_error,ctrl_error)= (  ( CTR_ERR, CTR_ERR, CTR_ERR) & ((0
	,0,1) ) ) # (  ( CTR_MSG, CTR_MSG, CTR_MSG) & ((0,0,0) ) ) # (  ( DAT_ERR, 
	DAT_ERR, DAT_ERR) & ((1,1,0) ) ) # (  ( DAT_MSG, DAT_MSG, DAT_MSG) & ((0,0,0)
	 ) ) # (  ( IDLE, IDLE, IDLE) & ((0,0,0) ) );
END;
