TITLE "timer used for DOM-TCAL, K.-H. Sulanke,DESY Zeuthen, 2006-01-19";
-- and power on reset
-- del_30us output added
-- tcal_delay_ct instead of dc_tcal_ct now
-- DC_CTRAP_res added

--INCLUDE "dc_tcal_ct.inc";	-- modulus 20000 15 bit counter
INCLUDE "tcal_delay_ct.inc";	-- 10 bit binary counter
INCLUDE "ponres_ct.inc";	-- to get a power on (fpga reload) reset pulse

--FUNCTION tcal_delay_ct (	clock,	aclr)
--RETURNS (	q[9..0]);

-- clock = 20MHz (50ns)

CONSTANT DELAY_15us = 300;	-- 15us
CONSTANT DELAY_30us = 600;	-- 30us

OPTIONS	BIT0=LSB;

SUBDESIGN DCOM_tcal_timer
(
	CLK20			: INPUT;	-- communication clock
	tcal_psnd		: INPUT;	-- TCAL timer start
	timer_clrn		: INPUT;	--
	RST				: INPUT;	-- DOM  power on reset

	del_15us		: OUTPUT;	-- TCAL can start now
	del_30us		: OUTPUT;	-- TCAL can start now
	h_pulse			: OUTPUT;	-- TCAL high pulse time
	l_pulse			: OUTPUT;	-- TCAL low pulse time
	pulse_sent		: OUTPUT;	-- whole TCAL pulse sent
	tx_time_lat		: OUTPUT;	-- to latch the start time time of the TCAL pulse
	DC_CTRAP_res	: OUTPUT;	-- state machine reset
)
VARIABLE
	del_15us		: DFF;
	del_30us		: DFF;
	h_pulse			: DFF;
	l_pulse			: DFF;
	pulse_sent		: DFF;
	tx_time_lat		: DFF;
	timer			: tcal_delay_ct;	-- binary 10 bit counter
	ponres			: ponres_ct;
	DC_CTRAP_res	: DFF;

BEGIN

timer.clock		= CLK20;
timer.aclr		= !timer_clrn;

ponres.clock	= CLK20;
ponres.aclr		= RST;
ponres.clk_en	= !ponres.cout;

DC_CTRAP_res.clk	= CLK20;
DC_CTRAP_res.d		= (ponres.q[] == 254 # RST);

del_15us.(clk, clrn)	= (CLK20, timer_clrn);
del_30us.(clk, clrn)	= (CLK20, timer_clrn);
h_pulse.(clk, clrn)		= (CLK20, timer_clrn);
l_pulse.(clk, clrn)		= (CLK20, timer_clrn);
pulse_sent.(clk, clrn)	= (CLK20, timer_clrn);
tx_time_lat.(clk, clrn)	= (CLK20, timer_clrn);

del_15us.d		= (timer.q[]==DELAY_15us);		-- 15us delay
del_30us.d		= (timer.q[]==DELAY_30us);		-- 15us delay

tx_time_lat.d	= (timer.q[]==(DELAY_15us+2)) & tcal_psnd;

h_pulse.d		= (timer.q[]==(DELAY_15us+2)) & tcal_psnd	-- 1us pulse (h+l)
				# h_pulse.q & !(timer.q[]==(DELAY_15us+12));
l_pulse.d		= (timer.q[]==(DELAY_15us+12)) & tcal_psnd
				# l_pulse.q & !(timer.q[]==(DELAY_15us+22));
				
pulse_sent.d	= (timer.q[]==(DELAY_15us+22)) & tcal_psnd;

END;
