% C:\PROJECTS\ICECUBE\DOR_REV1\FPGA\DCOM\TCAL\DCTC_FWR.tdf %
% AHDL code created by Visual Software Solution's StateCAD 4.11 %
% Fri Mar 03 17:55:58 2006 %

% This AHDL code was generated using: %
%  one-hot state assignment with boolean code format. %
%  Minimization is enabled,  implied else is enabled,  %
%  and outputs are speed optimized. %

SUBDESIGN DCTC_FWR(
	CLK :	INPUT;
	edge_end :	INPUT;
	hl_edge :	INPUT;
	msg_sent :	INPUT;
	res :	INPUT;
	tcal_prec :	INPUT;
	tcwf_af :	INPUT;
	tcwf_ef :	INPUT;
	tcwf_rd_next :	INPUT;
	pulse_rcvd :	OUTPUT;
	rx_time_lat :	OUTPUT;
	tcwf_aclr :	OUTPUT;
	tcwf_rdreq :	OUTPUT;
	tcwf_wrreq :	OUTPUT;
	wfm_ct_aclr :	OUTPUT;
	wfm_ct_sload :	OUTPUT;
	wfm_data_val :	OUTPUT;
)


VARIABLE
	CHEK_EF :	DFF;
	DAT_VALID :	DFF;
	EXP_EDGE :	DFF;
	EXP_EXTREM :	DFF;
	FWR :	DFF;
	IDLE :	DFF;
	LD_AF_CT :	DFF;
	pulse_rcvd :	DFF;
	RD_NEXT :	DFF;
	rx_time_lat :	DFF;
	RxTIME :	DFF;
	SENT_WT :	DFF;
	tcwf_aclr :	DFF;
	tcwf_rdreq :	DFF;
	tcwf_wrreq :	DFF;
	wfm_ct_aclr :	DFF;
	wfm_ct_sload :	DFF;
	wfm_data_val :	DFF;

BEGIN

% Clock setup %
	CHEK_EF.clk=CLK;
	DAT_VALID.clk=CLK;
	EXP_EDGE.clk=CLK;
	EXP_EXTREM.clk=CLK;
	FWR.clk=CLK;
	IDLE.clk=CLK;
	LD_AF_CT.clk=CLK;
	pulse_rcvd.clk=CLK;
	RD_NEXT.clk=CLK;
	rx_time_lat.clk=CLK;
	RxTIME.clk=CLK;
	SENT_WT.clk=CLK;
	tcwf_aclr.clk=CLK;
	tcwf_rdreq.clk=CLK;
	tcwf_wrreq.clk=CLK;
	wfm_ct_aclr.clk=CLK;
	wfm_ct_sload.clk=CLK;
	wfm_data_val.clk=CLK;

	IF ( res ) THEN
		CHEK_EF.clrn=GND;
		DAT_VALID.clrn=GND;
		EXP_EDGE.clrn=GND;
		EXP_EXTREM.clrn=GND;
		FWR.clrn=GND;
		IDLE.prn=GND;
		LD_AF_CT.clrn=GND;
		RD_NEXT.clrn=GND;
		RxTIME.clrn=GND;
		SENT_WT.clrn=GND;
		tcwf_aclr.prn=GND;
		pulse_rcvd.clrn=GND;
		wfm_data_val.clrn=GND;
		rx_time_lat.clrn=GND;
		wfm_ct_sload.clrn=GND;
		wfm_ct_aclr.prn=GND;
		tcwf_rdreq.clrn=GND;
		tcwf_wrreq.clrn=GND;
	ELSE
		CHEK_EF.clrn=VCC;
		DAT_VALID.clrn=VCC;
		EXP_EDGE.clrn=VCC;
		EXP_EXTREM.clrn=VCC;
		FWR.clrn=VCC;
		IDLE.prn=VCC;
		LD_AF_CT.clrn=VCC;
		RD_NEXT.clrn=VCC;
		RxTIME.clrn=VCC;
		SENT_WT.clrn=VCC;
		tcwf_aclr.prn=VCC;
		pulse_rcvd.clrn=VCC;
		wfm_data_val.clrn=VCC;
		rx_time_lat.clrn=VCC;
		wfm_ct_sload.clrn=VCC;
		wfm_ct_aclr.prn=VCC;
		tcwf_rdreq.clrn=VCC;
		tcwf_wrreq.clrn=VCC;
	END IF;
CHEK_EF =  RD_NEXT ;

DAT_VALID =  !tcwf_ef & CHEK_EF  #  !tcwf_rd_next & DAT_VALID  #  RxTIME ;

EXP_EDGE =  !hl_edge & EXP_EDGE  #  tcwf_af & FWR ;

EXP_EXTREM =  hl_edge & EXP_EDGE  #  !edge_end & EXP_EXTREM ;

FWR =  !tcwf_af & FWR  #  LD_AF_CT ;

IDLE =  !tcal_prec & IDLE  #  msg_sent & SENT_WT ;

LD_AF_CT =  tcal_prec & IDLE ;

RD_NEXT =  tcwf_rd_next & DAT_VALID ;

RxTIME =  edge_end & EXP_EXTREM ;

SENT_WT =  tcwf_ef & CHEK_EF  #  !msg_sent & SENT_WT ;



(tcwf_aclr,pulse_rcvd,wfm_data_val,rx_time_lat,wfm_ct_sload,wfm_ct_aclr,
	tcwf_rdreq,tcwf_wrreq) = (  ( RD_NEXT, RD_NEXT, RD_NEXT, RD_NEXT, RD_NEXT, 
	RD_NEXT, RD_NEXT, RD_NEXT) & ((1,1,1,1,1,1,1,1) ) & ((0,0,0,0,0,1,0,0) ) ) # 
	(  ( CHEK_EF, CHEK_EF, CHEK_EF, CHEK_EF, CHEK_EF, CHEK_EF, CHEK_EF, CHEK_EF) 
	& ( ! ( tcwf_ef, tcwf_ef, tcwf_ef, tcwf_ef, tcwf_ef, tcwf_ef, tcwf_ef, 
	tcwf_ef) ) & ((0,0,1,0,0,0,0,0) ) ) # (  ( DAT_VALID, DAT_VALID, DAT_VALID, 
	DAT_VALID, DAT_VALID, DAT_VALID, DAT_VALID, DAT_VALID) & ( ! ( tcwf_rd_next, 
	tcwf_rd_next, tcwf_rd_next, tcwf_rd_next, tcwf_rd_next, tcwf_rd_next, 
	tcwf_rd_next, tcwf_rd_next) ) & ((0,0,1,0,0,0,0,0) ) ) # (  ( RxTIME, RxTIME,
	 RxTIME, RxTIME, RxTIME, RxTIME, RxTIME, RxTIME) & ((1,1,1,1,1,1,1,1) ) & ((0
	,0,1,0,0,0,0,0) ) ) # (  ( EXP_EDGE, EXP_EDGE, EXP_EDGE, EXP_EDGE, EXP_EDGE, 
	EXP_EDGE, EXP_EDGE, EXP_EDGE) & ( ! ( hl_edge, hl_edge, hl_edge, hl_edge, 
	hl_edge, hl_edge, hl_edge, hl_edge) ) & ((0,0,0,0,0,1,1,1) ) ) # (  ( FWR, 
	FWR, FWR, FWR, FWR, FWR, FWR, FWR) & (  ( tcwf_af, tcwf_af, tcwf_af, tcwf_af,
	 tcwf_af, tcwf_af, tcwf_af, tcwf_af) ) & ((0,0,0,0,0,1,1,1) ) ) # (  ( 
	EXP_EDGE, EXP_EDGE, EXP_EDGE, EXP_EDGE, EXP_EDGE, EXP_EDGE, EXP_EDGE, 
	EXP_EDGE) & (  ( hl_edge, hl_edge, hl_edge, hl_edge, hl_edge, hl_edge, 
	hl_edge, hl_edge) ) & ((0,0,0,1,0,1,1,1) ) ) # (  ( EXP_EXTREM, EXP_EXTREM, 
	EXP_EXTREM, EXP_EXTREM, EXP_EXTREM, EXP_EXTREM, EXP_EXTREM, EXP_EXTREM) & ( !
	 ( edge_end, edge_end, edge_end, edge_end, edge_end, edge_end, edge_end, 
	edge_end) ) & ((0,0,0,1,0,1,1,1) ) ) # (  ( FWR, FWR, FWR, FWR, FWR, FWR, FWR
	, FWR) & ( ! ( tcwf_af, tcwf_af, tcwf_af, tcwf_af, tcwf_af, tcwf_af, tcwf_af,
	 tcwf_af) ) & ((0,0,0,0,0,0,0,1) ) ) # (  ( LD_AF_CT, LD_AF_CT, LD_AF_CT, 
	LD_AF_CT, LD_AF_CT, LD_AF_CT, LD_AF_CT, LD_AF_CT) & ((1,1,1,1,1,1,1,1) ) & ((
	0,0,0,0,0,0,0,1) ) ) # (  ( IDLE, IDLE, IDLE, IDLE, IDLE, IDLE, IDLE, IDLE) &
	 ( ! ( tcal_prec, tcal_prec, tcal_prec, tcal_prec, tcal_prec, tcal_prec, 
	tcal_prec, tcal_prec) ) & ((1,0,0,0,0,1,0,0) ) ) # (  ( SENT_WT, SENT_WT, 
	SENT_WT, SENT_WT, SENT_WT, SENT_WT, SENT_WT, SENT_WT) & (  ( msg_sent, 
	msg_sent, msg_sent, msg_sent, msg_sent, msg_sent, msg_sent, msg_sent) ) & ((1
	,0,0,0,0,1,0,0) ) ) # (  ( IDLE, IDLE, IDLE, IDLE, IDLE, IDLE, IDLE, IDLE) & 
	(  ( tcal_prec, tcal_prec, tcal_prec, tcal_prec, tcal_prec, tcal_prec, 
	tcal_prec, tcal_prec) ) & ((1,0,0,0,1,0,0,0) ) ) # (  ( DAT_VALID, DAT_VALID,
	 DAT_VALID, DAT_VALID, DAT_VALID, DAT_VALID, DAT_VALID, DAT_VALID) & (  ( 
	tcwf_rd_next, tcwf_rd_next, tcwf_rd_next, tcwf_rd_next, tcwf_rd_next, 
	tcwf_rd_next, tcwf_rd_next, tcwf_rd_next) ) & ((0,0,0,0,0,1,1,0) ) ) # (  ( 
	EXP_EXTREM, EXP_EXTREM, EXP_EXTREM, EXP_EXTREM, EXP_EXTREM, EXP_EXTREM, 
	EXP_EXTREM, EXP_EXTREM) & (  ( edge_end, edge_end, edge_end, edge_end, 
	edge_end, edge_end, edge_end, edge_end) ) & ((0,1,0,0,0,1,0,0) ) ) # (  ( 
	CHEK_EF, CHEK_EF, CHEK_EF, CHEK_EF, CHEK_EF, CHEK_EF, CHEK_EF, CHEK_EF) & (  
	( tcwf_ef, tcwf_ef, tcwf_ef, tcwf_ef, tcwf_ef, tcwf_ef, tcwf_ef, tcwf_ef) ) &
	 ((0,0,0,0,0,1,0,0) ) ) # (  ( SENT_WT, SENT_WT, SENT_WT, SENT_WT, SENT_WT, 
	SENT_WT, SENT_WT, SENT_WT) & ( ! ( msg_sent, msg_sent, msg_sent, msg_sent, 
	msg_sent, msg_sent, msg_sent, msg_sent) ) & ((0,0,0,0,0,1,0,0) ) );
END;
