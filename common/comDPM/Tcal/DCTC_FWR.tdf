% C:\PROJECTS\ICECUBE\DOR\FPGA\DCOM_01\TCAL\DCTC_FWR.tdf %
% AHDL code created by Visual Software Solution's StateCAD 5.0 %
% Sat Sep 27 13:11:35 2003 %

% This AHDL code was generated using: %
%  binary encoded state assignment with structured code format. %
%  Minimization is enabled,  implied else is enabled,  %
%  and outputs are speed optimized. %

SUBDESIGN DCTC_FWR(
	CLK :	INPUT;
	edge_end :	INPUT;
	edge_start :	INPUT;
	msg_sent :	INPUT;
	res :	INPUT;
	tcal_prec :	INPUT;
	tcwf_af :	INPUT;
	tcwf_ef :	INPUT;
	tcwf_rd_next :	INPUT;
	mean_lat :	OUTPUT;
	pulse_rcvd :	OUTPUT;
	rx_time_lat :	OUTPUT;
	tcwf_aclr :	OUTPUT;
	tcwf_af_ct_aclr :	OUTPUT;
	tcwf_af_ct_sload :	OUTPUT;
	tcwf_ct_aclr :	OUTPUT;
	tcwf_rdreq :	OUTPUT;
	tcwf_wrreq :	OUTPUT;
	wfm_data_val :	OUTPUT;
)


VARIABLE
	sreg : MACHINE OF BITS (SV0, SV1, SV2, SV3)
		WITH STATES (
			IDLE =	B"0101",
			CHEK_EF =	B"0000",
			DAT_VALID =	B"0001",
			EXP_EDGE =	B"0010",
			EXP_EXTREM =	B"0011",
			FWR =	B"0100",
			LD_AF_CT =	B"0110",
			RD_NEXT =	B"0111",
			RxTIME =	B"1000",
			SENT_WT =	B"1001"
		);

	mean_lat :	DFF;
	pulse_rcvd :	DFF;
	rx_time_lat :	DFF;
	tcwf_aclr :	DFF;
	tcwf_af_ct_aclr :	DFF;
	tcwf_af_ct_sload :	DFF;
	tcwf_ct_aclr :	DFF;
	tcwf_rdreq :	DFF;
	tcwf_wrreq :	DFF;
	wfm_data_val :	DFF;

BEGIN

% Clock setup %
	mean_lat.clk=CLK;
	pulse_rcvd.clk=CLK;
	rx_time_lat.clk=CLK;
	tcwf_aclr.clk=CLK;
	tcwf_af_ct_aclr.clk=CLK;
	tcwf_af_ct_sload.clk=CLK;
	tcwf_ct_aclr.clk=CLK;
	tcwf_rdreq.clk=CLK;
	tcwf_wrreq.clk=CLK;
	wfm_data_val.clk=CLK;
	sreg.clk=CLK;

	sreg.reset =  res ;

	IF ( res ) THEN
		tcwf_af_ct_sload.clrn=GND;
		tcwf_af_ct_aclr.prn=GND;
		pulse_rcvd.clrn=GND;
		wfm_data_val.clrn=GND;
		rx_time_lat.clrn=GND;
		mean_lat.clrn=GND;
		tcwf_ct_aclr.prn=GND;
		tcwf_aclr.prn=GND;
		tcwf_rdreq.clrn=GND;
		tcwf_wrreq.clrn=GND;
	ELSE
		tcwf_af_ct_sload.clrn=VCC;
		tcwf_af_ct_aclr.prn=VCC;
		pulse_rcvd.clrn=VCC;
		wfm_data_val.clrn=VCC;
		rx_time_lat.clrn=VCC;
		mean_lat.clrn=VCC;
		tcwf_ct_aclr.prn=VCC;
		tcwf_aclr.prn=VCC;
		tcwf_rdreq.clrn=VCC;
		tcwf_wrreq.clrn=VCC;
	END IF;

	CASE sreg IS
		WHEN CHEK_EF =>
			IF ( tcwf_ef ) THEN 
				sreg = SENT_WT;
				(tcwf_af_ct_sload,tcwf_af_ct_aclr,pulse_rcvd,wfm_data_val,rx_time_lat,
					mean_lat,tcwf_ct_aclr,tcwf_aclr,tcwf_rdreq,tcwf_wrreq)=(0,1,0,0,0,0,0,0,0,0);
			END IF;
			IF ( !tcwf_ef ) THEN 
				sreg = DAT_VALID;
				(tcwf_af_ct_sload,tcwf_af_ct_aclr,pulse_rcvd,wfm_data_val,rx_time_lat,
					mean_lat,tcwf_ct_aclr,tcwf_aclr,tcwf_rdreq,tcwf_wrreq)=(0,1,0,1,0,0,0,0,0,0);
			END IF;
		WHEN DAT_VALID =>
			IF ( tcwf_rd_next ) THEN 
				sreg = RD_NEXT;
				(tcwf_af_ct_sload,tcwf_af_ct_aclr,pulse_rcvd,wfm_data_val,rx_time_lat,
					mean_lat,tcwf_ct_aclr,tcwf_aclr,tcwf_rdreq,tcwf_wrreq)=(0,1,0,0,0,0,0,0,1,0);
			ELSE
				sreg = DAT_VALID;
				(tcwf_af_ct_sload,tcwf_af_ct_aclr,pulse_rcvd,wfm_data_val,rx_time_lat,
					mean_lat,tcwf_ct_aclr,tcwf_aclr,tcwf_rdreq,tcwf_wrreq)=(0,1,0,1,0,0,0,0,0,0);
			END IF;
		WHEN EXP_EDGE =>
			IF ( edge_start ) THEN 
				sreg = EXP_EXTREM;
				(tcwf_af_ct_sload,tcwf_af_ct_aclr,pulse_rcvd,wfm_data_val,rx_time_lat,
					mean_lat,tcwf_ct_aclr,tcwf_aclr,tcwf_rdreq,tcwf_wrreq)=(0,1,0,0,1,0,1,0,1,1);
			ELSE
				sreg = EXP_EDGE;
				(tcwf_af_ct_sload,tcwf_af_ct_aclr,pulse_rcvd,wfm_data_val,rx_time_lat,
					mean_lat,tcwf_ct_aclr,tcwf_aclr,tcwf_rdreq,tcwf_wrreq)=(0,1,0,0,0,0,1,0,1,1);
			END IF;
		WHEN EXP_EXTREM =>
			IF ( edge_end ) THEN 
				sreg = RxTIME;
				(tcwf_af_ct_sload,tcwf_af_ct_aclr,pulse_rcvd,wfm_data_val,rx_time_lat,
					mean_lat,tcwf_ct_aclr,tcwf_aclr,tcwf_rdreq,tcwf_wrreq)=(0,1,1,0,0,0,1,0,0,0);
			ELSE
				sreg = EXP_EXTREM;
				(tcwf_af_ct_sload,tcwf_af_ct_aclr,pulse_rcvd,wfm_data_val,rx_time_lat,
					mean_lat,tcwf_ct_aclr,tcwf_aclr,tcwf_rdreq,tcwf_wrreq)=(0,1,0,0,1,0,1,0,1,1);
			END IF;
		WHEN FWR =>
			IF ( tcwf_af ) THEN 
				sreg = EXP_EDGE;
				(tcwf_af_ct_sload,tcwf_af_ct_aclr,pulse_rcvd,wfm_data_val,rx_time_lat,
					mean_lat,tcwf_ct_aclr,tcwf_aclr,tcwf_rdreq,tcwf_wrreq)=(0,1,0,0,0,0,1,0,1,1);
			ELSE
				sreg = FWR;
				(tcwf_af_ct_sload,tcwf_af_ct_aclr,pulse_rcvd,wfm_data_val,rx_time_lat,
					mean_lat,tcwf_ct_aclr,tcwf_aclr,tcwf_rdreq,tcwf_wrreq)=(0,0,0,0,0,0,1,0,0,1);
			END IF;
		WHEN IDLE =>
			IF ( tcal_prec ) THEN 
				sreg = LD_AF_CT;
				(tcwf_af_ct_sload,tcwf_af_ct_aclr,pulse_rcvd,wfm_data_val,rx_time_lat,
					mean_lat,tcwf_ct_aclr,tcwf_aclr,tcwf_rdreq,tcwf_wrreq)=(1,0,0,0,0,1,1,0,0,0);
			ELSE
				sreg = IDLE;
				(tcwf_af_ct_sload,tcwf_af_ct_aclr,pulse_rcvd,wfm_data_val,rx_time_lat,
					mean_lat,tcwf_ct_aclr,tcwf_aclr,tcwf_rdreq,tcwf_wrreq)=(0,1,0,0,0,0,1,1,0,0);
			END IF;
		WHEN LD_AF_CT =>
			sreg = FWR;
			(tcwf_af_ct_sload,tcwf_af_ct_aclr,pulse_rcvd,wfm_data_val,rx_time_lat,
				mean_lat,tcwf_ct_aclr,tcwf_aclr,tcwf_rdreq,tcwf_wrreq)=(0,0,0,0,0,0,1,0,0,1);
		WHEN RD_NEXT =>
			sreg = CHEK_EF;
			(tcwf_af_ct_sload,tcwf_af_ct_aclr,pulse_rcvd,wfm_data_val,rx_time_lat,
				mean_lat,tcwf_ct_aclr,tcwf_aclr,tcwf_rdreq,tcwf_wrreq)=(0,1,0,0,0,0,0,0,0,0);
		WHEN RxTIME =>
			sreg = DAT_VALID;
			(tcwf_af_ct_sload,tcwf_af_ct_aclr,pulse_rcvd,wfm_data_val,rx_time_lat,
				mean_lat,tcwf_ct_aclr,tcwf_aclr,tcwf_rdreq,tcwf_wrreq)=(0,1,0,1,0,0,0,0,0,0);
		WHEN SENT_WT =>
			IF ( msg_sent ) THEN 
				sreg = IDLE;
				(tcwf_af_ct_sload,tcwf_af_ct_aclr,pulse_rcvd,wfm_data_val,rx_time_lat,
					mean_lat,tcwf_ct_aclr,tcwf_aclr,tcwf_rdreq,tcwf_wrreq)=(0,1,0,0,0,0,1,1,0,0);
			ELSE
				sreg = SENT_WT;
				(tcwf_af_ct_sload,tcwf_af_ct_aclr,pulse_rcvd,wfm_data_val,rx_time_lat,
					mean_lat,tcwf_ct_aclr,tcwf_aclr,tcwf_rdreq,tcwf_wrreq)=(0,1,0,0,0,0,0,0,0,0);
			END IF;
	END CASE;

END;
