-- Copyright (C) 1991-2002 Altera Corporation
-- Any  megafunction  design,  and related netlist (encrypted  or  decrypted),
-- support information,  device programming or simulation file,  and any other
-- associated  documentation or information  provided by  Altera  or a partner
-- under  Altera's   Megafunction   Partnership   Program  may  be  used  only
-- to program  PLD  devices (but not masked  PLD  devices) from  Altera.   Any
-- other  use  of such  megafunction  design,  netlist,  support  information,
-- device programming or simulation file,  or any other  related documentation
-- or information  is prohibited  for  any  other purpose,  including, but not
-- limited to  modification,  reverse engineering,  de-compiling, or use  with
-- any other  silicon devices,  unless such use is  explicitly  licensed under
-- a separate agreement with  Altera  or a megafunction partner.  Title to the
-- intellectual property,  including patents,  copyrights,  trademarks,  trade
-- secrets,  or maskworks,  embodied in any such megafunction design, netlist,
-- support  information,  device programming or simulation file,  or any other
-- related documentation or information provided by  Altera  or a megafunction
-- partner, remains with Altera, the megafunction partner, or their respective
-- licensors. No other licenses, including any licenses needed under any third
-- party's intellectual property, are provided herein.
-- 
COMPONENT stripe
PORT
(
		clk_ref	: IN	STD_LOGIC;
		npor	: IN	STD_LOGIC;
		nreset	: INOUT	STD_LOGIC;
		uartrxd	: IN	STD_LOGIC;
		uartdsrn	: IN	STD_LOGIC;
		uartctsn	: IN	STD_LOGIC;
		uartrin	: INOUT	STD_LOGIC;
		uartdcdn	: INOUT	STD_LOGIC;
		uarttxd	: OUT	STD_LOGIC;
		uartrtsn	: OUT	STD_LOGIC;
		uartdtrn	: OUT	STD_LOGIC;
		intextpin	: IN	STD_LOGIC;
		ebiack	: IN	STD_LOGIC;
		ebidq	: INOUT	STD_LOGIC_VECTOR(15 downto 0);
		ebiclk	: OUT	STD_LOGIC;
		ebiwen	: OUT	STD_LOGIC;
		ebioen	: OUT	STD_LOGIC;
		ebiaddr	: OUT	STD_LOGIC_VECTOR(24 downto 0);
		ebibe	: OUT	STD_LOGIC_VECTOR(1 downto 0);
		ebicsn	: OUT	STD_LOGIC_VECTOR(3 downto 0);
		sdramdq	: INOUT	STD_LOGIC_VECTOR(31 downto 0);
		sdramdqs	: INOUT	STD_LOGIC_VECTOR(3 downto 0);
		sdramclk	: OUT	STD_LOGIC;
		sdramclkn	: OUT	STD_LOGIC;
		sdramclke	: OUT	STD_LOGIC;
		sdramwen	: OUT	STD_LOGIC;
		sdramcasn	: OUT	STD_LOGIC;
		sdramrasn	: OUT	STD_LOGIC;
		sdramaddr	: OUT	STD_LOGIC_VECTOR(14 downto 0);
		sdramcsn	: OUT	STD_LOGIC_VECTOR(1 downto 0);
		sdramdqm	: OUT	STD_LOGIC_VECTOR(3 downto 0);
		slavehclk	: IN	STD_LOGIC;
		slavehwrite	: IN	STD_LOGIC;
		slavehreadyi	: IN	STD_LOGIC;
		slavehselreg	: IN	STD_LOGIC;
		slavehsel	: IN	STD_LOGIC;
		slavehmastlock	: IN	STD_LOGIC;
		slavehaddr	: IN	STD_LOGIC_VECTOR(31 downto 0);
		slavehtrans	: IN	STD_LOGIC_VECTOR(1 downto 0);
		slavehsize	: IN	STD_LOGIC_VECTOR(1 downto 0);
		slavehburst	: IN	STD_LOGIC_VECTOR(2 downto 0);
		slavehwdata	: IN	STD_LOGIC_VECTOR(31 downto 0);
		slavehreadyo	: OUT	STD_LOGIC;
		slavebuserrint	: OUT	STD_LOGIC;
		slavehresp	: OUT	STD_LOGIC_VECTOR(1 downto 0);
		slavehrdata	: OUT	STD_LOGIC_VECTOR(31 downto 0);
		masterhclk	: IN	STD_LOGIC;
		masterhready	: IN	STD_LOGIC;
		masterhgrant	: IN	STD_LOGIC;
		masterhrdata	: IN	STD_LOGIC_VECTOR(31 downto 0);
		masterhresp	: IN	STD_LOGIC_VECTOR(1 downto 0);
		masterhwrite	: OUT	STD_LOGIC;
		masterhlock	: OUT	STD_LOGIC;
		masterhbusreq	: OUT	STD_LOGIC;
		masterhaddr	: OUT	STD_LOGIC_VECTOR(31 downto 0);
		masterhburst	: OUT	STD_LOGIC_VECTOR(2 downto 0);
		masterhsize	: OUT	STD_LOGIC_VECTOR(1 downto 0);
		masterhtrans	: OUT	STD_LOGIC_VECTOR(1 downto 0);
		masterhwdata	: OUT	STD_LOGIC_VECTOR(31 downto 0);
		intpld	: IN	STD_LOGIC_VECTOR(5 downto 0);
		dp0_2_portaclk	: IN	STD_LOGIC;
		dp0_portawe	: IN	STD_LOGIC;
		dp0_portaaddr	: IN	STD_LOGIC_VECTOR(12 downto 0);
		dp0_portadatain	: IN	STD_LOGIC_VECTOR(7 downto 0);
		dp0_portadataout	: OUT	STD_LOGIC_VECTOR(7 downto 0);
		dp2_portawe	: IN	STD_LOGIC;
		dp2_portaaddr	: IN	STD_LOGIC_VECTOR(12 downto 0);
		dp2_portadatain	: IN	STD_LOGIC_VECTOR(7 downto 0);
		dp2_portadataout	: OUT	STD_LOGIC_VECTOR(7 downto 0);
		gpi	: IN	STD_LOGIC_VECTOR(3 downto 0);
		gpo	: OUT	STD_LOGIC_VECTOR(3 downto 0)
);
END COMPONENT;
