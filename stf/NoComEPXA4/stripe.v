// megafunction wizard: %ARM-Based Excalibur%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: ARM-Based Excalibur
// PROJECT: simpletest
// ============================================================
// File Name: C:\cygwin\home\thorsten\build\dom-fpga\stf\NoComEPXA4\stripe.v
// Megafunction Name(s): ARM-Based Excalibur
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
// ************************************************************
// 
// Copyright (C) 1991-2002 Altera Corporation
// Any  megafunction  design,  and related netlist (encrypted  or  decrypted),
// support information,  device programming or simulation file,  and any other
// associated  documentation or information  provided by  Altera  or a partner
// under  Altera's   Megafunction   Partnership   Program  may  be  used  only
// to program  PLD  devices (but not masked  PLD  devices) from  Altera.   Any
// other  use  of such  megafunction  design,  netlist,  support  information,
// device programming or simulation file,  or any other  related documentation
// or information  is prohibited  for  any  other purpose,  including, but not
// limited to  modification,  reverse engineering,  de-compiling, or use  with
// any other  silicon devices,  unless such use is  explicitly  licensed under
// a separate agreement with  Altera  or a megafunction partner.  Title to the
// intellectual property,  including patents,  copyrights,  trademarks,  trade
// secrets,  or maskworks,  embodied in any such megafunction design, netlist,
// support  information,  device programming or simulation file,  or any other
// related documentation or information provided by  Altera  or a megafunction
// partner, remains with Altera, the megafunction partner, or their respective
// licensors. No other licenses, including any licenses needed under any third
// party's intellectual property, are provided herein.
// 

module stripe
(
	clk_ref,
	npor,
	nreset,
	uartrxd,
	uartdsrn,
	uartctsn,
	uartrin,
	uartdcdn,
	uarttxd,
	uartrtsn,
	uartdtrn,
	intextpin,
	ebiack,
	ebidq,
	ebiclk,
	ebiwen,
	ebioen,
	ebiaddr,
	ebibe,
	ebicsn,
	sdramdq,
	sdramdqs,
	sdramclk,
	sdramclkn,
	sdramclke,
	sdramwen,
	sdramcasn,
	sdramrasn,
	sdramaddr,
	sdramcsn,
	sdramdqm,
	slavehclk,
	slavehwrite,
	slavehreadyi,
	slavehselreg,
	slavehsel,
	slavehmastlock,
	slavehaddr,
	slavehtrans,
	slavehsize,
	slavehburst,
	slavehwdata,
	slavehreadyo,
	slavebuserrint,
	slavehresp,
	slavehrdata,
	masterhclk,
	masterhready,
	masterhgrant,
	masterhrdata,
	masterhresp,
	masterhwrite,
	masterhlock,
	masterhbusreq,
	masterhaddr,
	masterhburst,
	masterhsize,
	masterhtrans,
	masterhwdata,
	intpld,
	dp0_2_portaclk,
	dp0_portawe,
	dp0_portaaddr,
	dp0_portadatain,
	dp0_portadataout,
	dp2_portawe,
	dp2_portaaddr,
	dp2_portadatain,
	dp2_portadataout,
	gpi,
	gpo
);

input	clk_ref;
input	npor;
inout	nreset;
input	uartrxd;
input	uartdsrn;
input	uartctsn;
inout	uartrin;
inout	uartdcdn;
output	uarttxd;
output	uartrtsn;
output	uartdtrn;
input	intextpin;
input	ebiack;
inout	[15:0] ebidq;
output	ebiclk;
output	ebiwen;
output	ebioen;
output	[24:0] ebiaddr;
output	[1:0] ebibe;
output	[3:0] ebicsn;
inout	[31:0] sdramdq;
inout	[3:0] sdramdqs;
output	sdramclk;
output	sdramclkn;
output	sdramclke;
output	sdramwen;
output	sdramcasn;
output	sdramrasn;
output	[14:0] sdramaddr;
output	[1:0] sdramcsn;
output	[3:0] sdramdqm;
input	slavehclk;
input	slavehwrite;
input	slavehreadyi;
input	slavehselreg;
input	slavehsel;
input	slavehmastlock;
input	[31:0] slavehaddr;
input	[1:0] slavehtrans;
input	[1:0] slavehsize;
input	[2:0] slavehburst;
input	[31:0] slavehwdata;
output	slavehreadyo;
output	slavebuserrint;
output	[1:0] slavehresp;
output	[31:0] slavehrdata;
input	masterhclk;
input	masterhready;
input	masterhgrant;
input	[31:0] masterhrdata;
input	[1:0] masterhresp;
output	masterhwrite;
output	masterhlock;
output	masterhbusreq;
output	[31:0] masterhaddr;
output	[2:0] masterhburst;
output	[1:0] masterhsize;
output	[1:0] masterhtrans;
output	[31:0] masterhwdata;
input	[5:0] intpld;
input	dp0_2_portaclk;
input	dp0_portawe;
input	[13:0] dp0_portaaddr;
input	[7:0] dp0_portadatain;
output	[7:0] dp0_portadataout;
input	dp2_portawe;
input	[13:0] dp2_portaaddr;
input	[7:0] dp2_portadatain;
output	[7:0] dp2_portadataout;
input	[7:0] gpi;
output	[7:0] gpo;

wire	proc_ntrst;
wire	proc_tck;
wire	proc_tdi;
wire	proc_tms;
wire	proc_tdo;
wire	intuart;
wire	inttimer0;
wire	inttimer1;
wire	intcommtx;
wire	intcommrx;
wire	debugrq;
wire	debugext0;
wire	debugext1;
wire	[3:0] debugextin;
wire	debugack;
wire	debugrng0;
wire	debugrng1;
wire	[3:0] debugextout;

assign proc_ntrst = 1'b1;
assign proc_tck = 1'b0;
assign proc_tdi = 1'b0;
assign proc_tms = 1'b0;
assign debugrq = 1'b0;
assign debugext0 = 1'b0;
assign debugext1 = 1'b0;
assign debugextin = 4'b0;

alt_exc_stripe lpm_instance
(
	.clk_ref(clk_ref),
	.npor(npor),
	.nreset(nreset),
	.uartrxd(uartrxd),
	.uartdsrn(uartdsrn),
	.uartctsn(uartctsn),
	.uartrin(uartrin),
	.uartdcdn(uartdcdn),
	.uarttxd(uarttxd),
	.uartrtsn(uartrtsn),
	.uartdtrn(uartdtrn),
	.intextpin(intextpin),
	.ebiack(ebiack),
	.ebidq(ebidq),
	.ebiclk(ebiclk),
	.ebiwen(ebiwen),
	.ebioen(ebioen),
	.ebiaddr(ebiaddr),
	.ebibe(ebibe),
	.ebicsn(ebicsn),
	.sdramdq(sdramdq),
	.sdramdqs(sdramdqs),
	.sdramclk(sdramclk),
	.sdramclkn(sdramclkn),
	.sdramclke(sdramclke),
	.sdramwen(sdramwen),
	.sdramcasn(sdramcasn),
	.sdramrasn(sdramrasn),
	.sdramaddr(sdramaddr),
	.sdramcsn(sdramcsn),
	.sdramdqm(sdramdqm),
	.slavehclk(slavehclk),
	.slavehwrite(slavehwrite),
	.slavehreadyi(slavehreadyi),
	.slavehselreg(slavehselreg),
	.slavehsel(slavehsel),
	.slavehmastlock(slavehmastlock),
	.slavehaddr(slavehaddr),
	.slavehtrans(slavehtrans),
	.slavehsize(slavehsize),
	.slavehburst(slavehburst),
	.slavehwdata(slavehwdata),
	.slavehreadyo(slavehreadyo),
	.slavebuserrint(slavebuserrint),
	.slavehresp(slavehresp),
	.slavehrdata(slavehrdata),
	.masterhclk(masterhclk),
	.masterhready(masterhready),
	.masterhgrant(masterhgrant),
	.masterhrdata(masterhrdata),
	.masterhresp(masterhresp),
	.masterhwrite(masterhwrite),
	.masterhlock(masterhlock),
	.masterhbusreq(masterhbusreq),
	.masterhaddr(masterhaddr),
	.masterhburst(masterhburst),
	.masterhsize(masterhsize),
	.masterhtrans(masterhtrans),
	.masterhwdata(masterhwdata),
	.intpld(intpld),
	.dp0_2_portaclk(dp0_2_portaclk),
	.dp0_portawe(dp0_portawe),
	.dp0_portaaddr(dp0_portaaddr),
	.dp0_portadatain(dp0_portadatain),
	.dp0_portadataout(dp0_portadataout),
	.dp2_portawe(dp2_portawe),
	.dp2_portaaddr(dp2_portaaddr),
	.dp2_portadatain(dp2_portadatain),
	.dp2_portadataout(dp2_portadataout),
	.gpi(gpi),
	.gpo(gpo),
	.proc_ntrst(proc_ntrst),
	.proc_tck(proc_tck),
	.proc_tdi(proc_tdi),
	.proc_tms(proc_tms),
	.proc_tdo(proc_tdo),
	.intuart(intuart),
	.inttimer0(inttimer0),
	.inttimer1(inttimer1),
	.intcommtx(intcommtx),
	.intcommrx(intcommrx),
	.debugrq(debugrq),
	.debugext0(debugext0),
	.debugext1(debugext1),
	.debugextin(debugextin),
	.debugack(debugack),
	.debugrng0(debugrng0),
	.debugrng1(debugrng1),
	.debugextout(debugextout)
);
defparam
	lpm_instance.sdram_width = 32,
	lpm_instance.sdramdqm_width = 4,
	lpm_instance.processor = "ARM",
	lpm_instance.device_size = 400,
	lpm_instance.boot_from_flash = "FALSE",
	lpm_instance.debug_extensions = "FALSE",
	lpm_instance.ebi0_width = 16,
	lpm_instance.use_initialisation_files = "TRUE",
	lpm_instance.use_short_reset = "TRUE",
	lpm_instance.gpio_width = 8,
	lpm_instance.dp0_output_mode = "UNREG",
	lpm_instance.dp1_output_mode = "UNREG",
	lpm_instance.dp0_width = 8,
	lpm_instance.dp0_widthad = 14,
	lpm_instance.dp0_mode = "2xSPx8",
	lpm_instance.dp1_mode = "UNUSED";

endmodule
