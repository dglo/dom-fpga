% C:\PROJECTS\ICECUBE\DOR\FPGA\DCOM_01\RX_CHAN\DC_MRAP.tdf %
% AHDL code created by Visual Software Solution's StateCAD 4.11 %
% Wed Apr 21 09:39:23 2004 %

% This AHDL code was generated using: %
%  binary encoded state assignment with structured code format. %
%  Minimization is enabled,  implied else is enabled,  %
%  and outputs are speed optimized. %

SUBDESIGN DC_MRAP(
	CLK :	INPUT;
	crc_zero :	INPUT;
	data_msg :	INPUT;
	data_stb :	INPUT;
	eof_stb :	INPUT;
	RESET :	INPUT;
	byte_ena0a :	OUTPUT;
	byte_ena0b :	OUTPUT;
	byte_ena1 :	OUTPUT;
	byte_ena2 :	OUTPUT;
	byte_ena3 :	OUTPUT;
	cmd_ena :	OUTPUT;
	crc_init :	OUTPUT;
	ctrl_error :	OUTPUT;
	ctrl_rcvd :	OUTPUT;
	data_error :	OUTPUT;
	data_rcvd :	OUTPUT;
	first_wadr_ena :	OUTPUT;
	first_wadr_rld :	OUTPUT;
	msg_type_ena :	OUTPUT;
	rx_we :	OUTPUT;
)


VARIABLE
	sreg : MACHINE OF BITS (SV0, SV1, SV2, SV3)
		WITH STATES (
			STF_WAIT =	B"1110",
			BYTE0 =	B"0000",
			BYTE1 =	B"0001",
			BYTE2 =	B"0010",
			BYTE3 =	B"0011",
			CTRL_ERR =	B"0100",
			CTRL_OK =	B"0101",
			DATA_ERR =	B"0110",
			DATA_OK =	B"0111",
			DCMD_SEQ1 =	B"1000",
			DPR_DAT_WR =	B"1001",
			EOF_WAIT =	B"1010",
			LEN0 =	B"1011",
			MTYPE_LEN1 =	B"1100",
			PTYPE_SEQ0 =	B"1101"
		);

	byte_ena0a :	DFF;
	byte_ena0b :	DFF;
	byte_ena1 :	DFF;
	byte_ena2 :	DFF;
	byte_ena3 :	DFF;
	cmd_ena :	DFF;
	crc_init :	DFF;
	ctrl_error :	DFF;
	ctrl_rcvd :	DFF;
	data_error :	DFF;
	data_rcvd :	DFF;
	first_wadr_ena :	DFF;
	first_wadr_rld :	DFF;
	msg_type_ena :	DFF;
	rx_we :	DFF;

BEGIN

% Clock setup %
	byte_ena0a.clk=CLK;
	byte_ena0b.clk=CLK;
	byte_ena1.clk=CLK;
	byte_ena2.clk=CLK;
	byte_ena3.clk=CLK;
	cmd_ena.clk=CLK;
	crc_init.clk=CLK;
	ctrl_error.clk=CLK;
	ctrl_rcvd.clk=CLK;
	data_error.clk=CLK;
	data_rcvd.clk=CLK;
	first_wadr_ena.clk=CLK;
	first_wadr_rld.clk=CLK;
	msg_type_ena.clk=CLK;
	rx_we.clk=CLK;
	sreg.clk=CLK;

	sreg.reset =  RESET ;

	IF ( RESET ) THEN
		first_wadr_rld.clrn=GND;
		ctrl_error.clrn=GND;
		ctrl_rcvd.clrn=GND;
		data_error.clrn=GND;
		data_rcvd.clrn=GND;
		first_wadr_ena.clrn=GND;
		rx_we.clrn=GND;
		byte_ena0b.clrn=GND;
		cmd_ena.clrn=GND;
		msg_type_ena.clrn=GND;
		crc_init.prn=GND;
		byte_ena3.clrn=GND;
		byte_ena2.clrn=GND;
		byte_ena1.clrn=GND;
		byte_ena0a.prn=GND;
	ELSE
		first_wadr_rld.clrn=VCC;
		ctrl_error.clrn=VCC;
		ctrl_rcvd.clrn=VCC;
		data_error.clrn=VCC;
		data_rcvd.clrn=VCC;
		first_wadr_ena.clrn=VCC;
		rx_we.clrn=VCC;
		byte_ena0b.clrn=VCC;
		cmd_ena.clrn=VCC;
		msg_type_ena.clrn=VCC;
		crc_init.prn=VCC;
		byte_ena3.clrn=VCC;
		byte_ena2.clrn=VCC;
		byte_ena1.clrn=VCC;
		byte_ena0a.prn=VCC;
	END IF;

	CASE sreg IS
		WHEN BYTE0 =>
			IF ( !eof_stb & !data_stb ) THEN 
				sreg = BYTE0;
				(first_wadr_rld,ctrl_error,ctrl_rcvd,data_error,data_rcvd,first_wadr_ena,
					rx_we,byte_ena0b,cmd_ena,msg_type_ena,crc_init,byte_ena3,byte_ena2,byte_ena1,
					byte_ena0a)=(0,0,0,0,0,0,0,0,0,0,0,0,0,0,1);
			END IF;
			IF ( eof_stb & crc_zero ) THEN 
				sreg = DATA_OK;
				(first_wadr_rld,ctrl_error,ctrl_rcvd,data_error,data_rcvd,first_wadr_ena,
					rx_we,byte_ena0b,cmd_ena,msg_type_ena,crc_init,byte_ena3,byte_ena2,byte_ena1,
					byte_ena0a)=(0,0,0,0,1,0,0,0,0,0,0,0,0,0,0);
			END IF;
			IF ( data_stb ) THEN 
				sreg = DPR_DAT_WR;
				(first_wadr_rld,ctrl_error,ctrl_rcvd,data_error,data_rcvd,first_wadr_ena,
					rx_we,byte_ena0b,cmd_ena,msg_type_ena,crc_init,byte_ena3,byte_ena2,byte_ena1,
					byte_ena0a)=(0,0,0,0,0,0,1,0,0,0,0,0,0,0,0);
			END IF;
			IF ( eof_stb & !crc_zero ) THEN 
				sreg = DATA_ERR;
				(first_wadr_rld,ctrl_error,ctrl_rcvd,data_error,data_rcvd,first_wadr_ena,
					rx_we,byte_ena0b,cmd_ena,msg_type_ena,crc_init,byte_ena3,byte_ena2,byte_ena1,
					byte_ena0a)=(1,0,0,1,0,0,0,0,0,0,0,0,0,0,0);
			END IF;
		WHEN BYTE1 =>
			IF ( data_stb ) THEN 
				sreg = BYTE2;
				(first_wadr_rld,ctrl_error,ctrl_rcvd,data_error,data_rcvd,first_wadr_ena,
					rx_we,byte_ena0b,cmd_ena,msg_type_ena,crc_init,byte_ena3,byte_ena2,byte_ena1,
					byte_ena0a)=(0,0,0,0,0,0,0,0,0,0,0,0,1,0,0);
			ELSE
				sreg = BYTE1;
				(first_wadr_rld,ctrl_error,ctrl_rcvd,data_error,data_rcvd,first_wadr_ena,
					rx_we,byte_ena0b,cmd_ena,msg_type_ena,crc_init,byte_ena3,byte_ena2,byte_ena1,
					byte_ena0a)=(0,0,0,0,0,0,0,1,0,0,0,0,0,1,0);
			END IF;
		WHEN BYTE2 =>
			IF ( data_stb ) THEN 
				sreg = BYTE3;
				(first_wadr_rld,ctrl_error,ctrl_rcvd,data_error,data_rcvd,first_wadr_ena,
					rx_we,byte_ena0b,cmd_ena,msg_type_ena,crc_init,byte_ena3,byte_ena2,byte_ena1,
					byte_ena0a)=(0,0,0,0,0,0,0,0,0,0,0,1,0,0,0);
			ELSE
				sreg = BYTE2;
				(first_wadr_rld,ctrl_error,ctrl_rcvd,data_error,data_rcvd,first_wadr_ena,
					rx_we,byte_ena0b,cmd_ena,msg_type_ena,crc_init,byte_ena3,byte_ena2,byte_ena1,
					byte_ena0a)=(0,0,0,0,0,0,0,0,0,0,0,0,1,0,0);
			END IF;
		WHEN BYTE3 =>
			IF ( data_stb ) THEN 
				sreg = BYTE0;
				(first_wadr_rld,ctrl_error,ctrl_rcvd,data_error,data_rcvd,first_wadr_ena,
					rx_we,byte_ena0b,cmd_ena,msg_type_ena,crc_init,byte_ena3,byte_ena2,byte_ena1,
					byte_ena0a)=(0,0,0,0,0,0,0,0,0,0,0,0,0,0,1);
			ELSE
				sreg = BYTE3;
				(first_wadr_rld,ctrl_error,ctrl_rcvd,data_error,data_rcvd,first_wadr_ena,
					rx_we,byte_ena0b,cmd_ena,msg_type_ena,crc_init,byte_ena3,byte_ena2,byte_ena1,
					byte_ena0a)=(0,0,0,0,0,0,0,0,0,0,0,1,0,0,0);
			END IF;
		WHEN CTRL_ERR =>
			sreg = STF_WAIT;
			(first_wadr_rld,ctrl_error,ctrl_rcvd,data_error,data_rcvd,first_wadr_ena,
				rx_we,byte_ena0b,cmd_ena,msg_type_ena,crc_init,byte_ena3,byte_ena2,byte_ena1,
				byte_ena0a)=(0,0,0,0,0,0,0,0,0,0,1,0,0,0,1);
		WHEN CTRL_OK =>
			sreg = STF_WAIT;
			(first_wadr_rld,ctrl_error,ctrl_rcvd,data_error,data_rcvd,first_wadr_ena,
				rx_we,byte_ena0b,cmd_ena,msg_type_ena,crc_init,byte_ena3,byte_ena2,byte_ena1,
				byte_ena0a)=(0,0,0,0,0,0,0,0,0,0,1,0,0,0,1);
		WHEN DATA_ERR =>
			sreg = STF_WAIT;
			(first_wadr_rld,ctrl_error,ctrl_rcvd,data_error,data_rcvd,first_wadr_ena,
				rx_we,byte_ena0b,cmd_ena,msg_type_ena,crc_init,byte_ena3,byte_ena2,byte_ena1,
				byte_ena0a)=(0,0,0,0,0,0,0,0,0,0,1,0,0,0,1);
		WHEN DATA_OK =>
			sreg = STF_WAIT;
			(first_wadr_rld,ctrl_error,ctrl_rcvd,data_error,data_rcvd,first_wadr_ena,
				rx_we,byte_ena0b,cmd_ena,msg_type_ena,crc_init,byte_ena3,byte_ena2,byte_ena1,
				byte_ena0a)=(0,0,0,0,0,0,0,0,0,0,1,0,0,0,1);
		WHEN DCMD_SEQ1 =>
			IF ( !data_stb ) THEN 
				sreg = DCMD_SEQ1;
				(first_wadr_rld,ctrl_error,ctrl_rcvd,data_error,data_rcvd,first_wadr_ena,
					rx_we,byte_ena0b,cmd_ena,msg_type_ena,crc_init,byte_ena3,byte_ena2,byte_ena1,
					byte_ena0a)=(0,0,0,0,0,1,0,0,1,0,0,1,0,0,0);
			END IF;
			IF ( data_stb & !data_msg ) THEN 
				sreg = EOF_WAIT;
				(first_wadr_rld,ctrl_error,ctrl_rcvd,data_error,data_rcvd,first_wadr_ena,
					rx_we,byte_ena0b,cmd_ena,msg_type_ena,crc_init,byte_ena3,byte_ena2,byte_ena1,
					byte_ena0a)=(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
			END IF;
			IF ( data_stb & data_msg ) THEN 
				sreg = BYTE0;
				(first_wadr_rld,ctrl_error,ctrl_rcvd,data_error,data_rcvd,first_wadr_ena,
					rx_we,byte_ena0b,cmd_ena,msg_type_ena,crc_init,byte_ena3,byte_ena2,byte_ena1,
					byte_ena0a)=(0,0,0,0,0,0,0,0,0,0,0,0,0,0,1);
			END IF;
		WHEN DPR_DAT_WR =>
			sreg = BYTE1;
			(first_wadr_rld,ctrl_error,ctrl_rcvd,data_error,data_rcvd,first_wadr_ena,
				rx_we,byte_ena0b,cmd_ena,msg_type_ena,crc_init,byte_ena3,byte_ena2,byte_ena1,
				byte_ena0a)=(0,0,0,0,0,0,0,1,0,0,0,0,0,1,0);
		WHEN EOF_WAIT =>
			IF ( !eof_stb ) THEN 
				sreg = EOF_WAIT;
				(first_wadr_rld,ctrl_error,ctrl_rcvd,data_error,data_rcvd,first_wadr_ena,
					rx_we,byte_ena0b,cmd_ena,msg_type_ena,crc_init,byte_ena3,byte_ena2,byte_ena1,
					byte_ena0a)=(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
			END IF;
			IF ( eof_stb & crc_zero ) THEN 
				sreg = CTRL_OK;
				(first_wadr_rld,ctrl_error,ctrl_rcvd,data_error,data_rcvd,first_wadr_ena,
					rx_we,byte_ena0b,cmd_ena,msg_type_ena,crc_init,byte_ena3,byte_ena2,byte_ena1,
					byte_ena0a)=(0,0,1,0,0,0,0,0,0,0,0,0,0,0,0);
			END IF;
			IF ( eof_stb & !crc_zero ) THEN 
				sreg = CTRL_ERR;
				(first_wadr_rld,ctrl_error,ctrl_rcvd,data_error,data_rcvd,first_wadr_ena,
					rx_we,byte_ena0b,cmd_ena,msg_type_ena,crc_init,byte_ena3,byte_ena2,byte_ena1,
					byte_ena0a)=(0,1,0,0,0,0,0,0,0,0,0,0,0,0,0);
			END IF;
		WHEN LEN0 =>
			IF ( data_stb ) THEN 
				sreg = MTYPE_LEN1;
				(first_wadr_rld,ctrl_error,ctrl_rcvd,data_error,data_rcvd,first_wadr_ena,
					rx_we,byte_ena0b,cmd_ena,msg_type_ena,crc_init,byte_ena3,byte_ena2,byte_ena1,
					byte_ena0a)=(0,0,0,0,0,0,0,1,0,1,0,0,0,1,0);
			ELSE
				sreg = LEN0;
				(first_wadr_rld,ctrl_error,ctrl_rcvd,data_error,data_rcvd,first_wadr_ena,
					rx_we,byte_ena0b,cmd_ena,msg_type_ena,crc_init,byte_ena3,byte_ena2,byte_ena1,
					byte_ena0a)=(0,0,0,0,0,0,0,0,0,0,0,0,0,0,1);
			END IF;
		WHEN MTYPE_LEN1 =>
			IF ( data_stb ) THEN 
				sreg = PTYPE_SEQ0;
				(first_wadr_rld,ctrl_error,ctrl_rcvd,data_error,data_rcvd,first_wadr_ena,
					rx_we,byte_ena0b,cmd_ena,msg_type_ena,crc_init,byte_ena3,byte_ena2,byte_ena1,
					byte_ena0a)=(0,0,0,0,0,0,0,0,0,0,0,0,1,0,0);
			ELSE
				sreg = MTYPE_LEN1;
				(first_wadr_rld,ctrl_error,ctrl_rcvd,data_error,data_rcvd,first_wadr_ena,
					rx_we,byte_ena0b,cmd_ena,msg_type_ena,crc_init,byte_ena3,byte_ena2,byte_ena1,
					byte_ena0a)=(0,0,0,0,0,0,0,1,0,1,0,0,0,1,0);
			END IF;
		WHEN PTYPE_SEQ0 =>
			IF ( data_stb ) THEN 
				sreg = DCMD_SEQ1;
				(first_wadr_rld,ctrl_error,ctrl_rcvd,data_error,data_rcvd,first_wadr_ena,
					rx_we,byte_ena0b,cmd_ena,msg_type_ena,crc_init,byte_ena3,byte_ena2,byte_ena1,
					byte_ena0a)=(0,0,0,0,0,1,0,0,1,0,0,1,0,0,0);
			ELSE
				sreg = PTYPE_SEQ0;
				(first_wadr_rld,ctrl_error,ctrl_rcvd,data_error,data_rcvd,first_wadr_ena,
					rx_we,byte_ena0b,cmd_ena,msg_type_ena,crc_init,byte_ena3,byte_ena2,byte_ena1,
					byte_ena0a)=(0,0,0,0,0,0,0,0,0,0,0,0,1,0,0);
			END IF;
		WHEN STF_WAIT =>
			sreg = LEN0;
			(first_wadr_rld,ctrl_error,ctrl_rcvd,data_error,data_rcvd,first_wadr_ena,
				rx_we,byte_ena0b,cmd_ena,msg_type_ena,crc_init,byte_ena3,byte_ena2,byte_ena1,
				byte_ena0a)=(0,0,0,0,0,0,0,0,0,0,0,0,0,0,1);
	END CASE;

END;
