HIF003
--
-- Copyright (C) 1988-2001 Altera Corporation
-- Any megafunction design, and related net list (encrypted or decrypted),
-- support information, device programming or simulation file, and any other
-- associated documentation or information provided by Altera or a partner
-- under Altera's Megafunction Partnership Program may be used only to
-- program PLD devices (but not masked PLD devices) from Altera.  Any other
-- use of such megafunction design, net list, support information, device
-- programming or simulation file, or any other related documentation or
-- information is prohibited for any other purpose, including, but not
-- limited to modification, reverse engineering, de-compiling, or use with
-- any other silicon devices, unless such use is explicitly licensed under
-- a separate agreement with Altera or a megafunction partner.  Title to
-- the intellectual property, including patents, copyrights, trademarks,
-- trade secrets, or maskworks, embodied in any such megafunction design,
-- net list, support information, device programming or simulation file, or
-- any other related documentation or information provided by Altera or a
-- megafunction partner, remains with Altera, the megafunction partner, or
-- their respective licensors.  No other licenses, including any licenses
-- needed under any third party's intellectual property, are provided herein.
--
-- Warning: do not edit this file!
--
FILES
{
	lpm_constant.tdf
	{
		lpm_constant [USE_LPM_FOR_AHDL_OPERATORS,LPM_WIDTH,LPM_CVALUE] []
		{
			23 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=3,LPM_CVALUE=0] [];
		}
	}
	cmp10.tdf
	{
		cmp10 [USE_LPM_FOR_AHDL_OPERATORS] [lpm_compare.inc]
		{
			1 [USE_LPM_FOR_AHDL_OPERATORS=OFF] [dataa9,dataa8,dataa7,dataa6,dataa5,dataa4,dataa3,dataa2,dataa1,dataa0,datab9,datab8,datab7,datab6,datab5,datab4,datab3,datab2,datab1,datab0,agb];
		}
	}
	sub10.tdf
	{
		sub10 [USE_LPM_FOR_AHDL_OPERATORS] [lpm_add_sub.inc]
		{
			14 [USE_LPM_FOR_AHDL_OPERATORS=OFF] [result9,result8,result7,result6,result5,result4,result3,result2,result1,result0,dataa9,dataa8,dataa7,dataa6,dataa5,dataa4,dataa3,dataa2,dataa1,dataa0,datab9,datab8,datab7,datab6,datab5,datab4,datab3,datab2,datab1,datab0];
		}
	}
	ctup3b.tdf
	{
		ctup3b [USE_LPM_FOR_AHDL_OPERATORS] [lpm_counter.inc]
		{
			18 [USE_LPM_FOR_AHDL_OPERATORS=OFF] [clock,aclr,cout];
		}
	}
	hl_discr.tdf
	{
		hl_discr [USE_LPM_FOR_AHDL_OPERATORS] []
		{
			24 [USE_LPM_FOR_AHDL_OPERATORS=OFF] [CLK,ct_cout,hl_edg,res,ct_aclr,diffen,maxen,minen];
		}
	}
	lpm_compare.tdf
	{
		lpm_compare [USE_LPM_FOR_AHDL_OPERATORS,lpm_width,LPM_REPRESENTATION=UNSIGNED,LPM_PIPELINE=0,CHAIN_SIZE=8,ONE_INPUT_IS_CONSTANT=NO,CARRY_CHAIN=MANUAL,CASCADE_CHAIN=MANUAL,CARRY_CHAIN_LENGTH=8,CASCADE_CHAIN_LENGTH=8,DEVICE_FAMILY=FLEX8000] [aglobal.inc,altshift.inc,comptree.inc]
		{
			2 [USE_LPM_FOR_AHDL_OPERATORS=OFF,lpm_width=10,LPM_REPRESENTATION=UNSIGNED,LPM_PIPELINE=0,CHAIN_SIZE=8,ONE_INPUT_IS_CONSTANT=NO,CARRY_CHAIN=IGNORE,CASCADE_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,CASCADE_CHAIN_LENGTH=2,DEVICE_FAMILY=ACEX1K] [datab0,datab1,datab2,datab3,datab4,datab5,datab6,datab7,datab8,datab9,dataa0,dataa1,dataa2,dataa3,dataa4,dataa5,dataa6,dataa7,dataa8,dataa9,agb];
		}
	}
	comptree.tdf
	{
		comptree [USE_LPM_FOR_AHDL_OPERATORS,lpm_width,CHAIN_LENGTH=8,ONE_INPUT_CONSTANT=0,OUTPUTS_CLOCKED=0,BURRIED_CLOCKED=1,MODE=0] [lpm_constant.inc,cmpchain.inc,comptree.inc]
		{
			3 [USE_LPM_FOR_AHDL_OPERATORS=OFF,lpm_width=10,CHAIN_LENGTH=8,ONE_INPUT_CONSTANT=0,OUTPUTS_CLOCKED=0,BURRIED_CLOCKED=1,MODE=0] [datab0,datab1,datab2,datab3,datab4,datab5,datab6,datab7,datab8,datab9,dataa0,dataa1,dataa2,dataa3,dataa4,dataa5,dataa6,dataa7,dataa8,dataa9,agb];
			5 [USE_LPM_FOR_AHDL_OPERATORS=OFF,lpm_width=8,CHAIN_LENGTH=1,ONE_INPUT_CONSTANT=0,OUTPUTS_CLOCKED=1,BURRIED_CLOCKED=0,MODE=0] [datab0,datab1,datab2,datab3,datab4,datab5,datab6,datab7,dataa0,dataa1,dataa2,dataa3,dataa4,dataa5,dataa6,dataa7,agb];
			8 [USE_LPM_FOR_AHDL_OPERATORS=OFF,lpm_width=4,CHAIN_LENGTH=1,ONE_INPUT_CONSTANT=0,OUTPUTS_CLOCKED=1,BURRIED_CLOCKED=0,MODE=1] [datab0,datab1,datab2,datab3,dataa0,dataa1,dataa2,dataa3,agb];
			11 [USE_LPM_FOR_AHDL_OPERATORS=OFF,lpm_width=2,CHAIN_LENGTH=1,ONE_INPUT_CONSTANT=0,OUTPUTS_CLOCKED=1,BURRIED_CLOCKED=0,MODE=1] [datab0,datab1,dataa0,dataa1,agb];
			12 [USE_LPM_FOR_AHDL_OPERATORS=OFF,lpm_width=2,CHAIN_LENGTH=8,ONE_INPUT_CONSTANT=0,OUTPUTS_CLOCKED=0,BURRIED_CLOCKED=1,MODE=1] [datab0,datab1,dataa0,dataa1,agb];
		}
	}
	cmpchain.tdf
	{
		cmpchain [USE_LPM_FOR_AHDL_OPERATORS,lpm_width,ONE_INPUT_CONSTANT,MODE,CARRY_CHAIN,CASCADE_CHAIN,CARRY_CHAIN_LENGTH,CASCADE_CHAIN_LENGTH,DEVICE_FAMILY] [aglobal.inc,comptree.inc]
		{
			4 [USE_LPM_FOR_AHDL_OPERATORS=OFF,lpm_width=8,ONE_INPUT_CONSTANT=0,MODE=0,CARRY_CHAIN=IGNORE,CASCADE_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,CASCADE_CHAIN_LENGTH=2,DEVICE_FAMILY=ACEX1K] [datab0,datab1,datab2,datab3,datab4,datab5,datab6,datab7,dataa0,dataa1,dataa2,dataa3,dataa4,dataa5,dataa6,dataa7,agb];
			6 [USE_LPM_FOR_AHDL_OPERATORS=OFF,lpm_width=2,ONE_INPUT_CONSTANT=0,MODE=0,CARRY_CHAIN=IGNORE,CASCADE_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,CASCADE_CHAIN_LENGTH=2,DEVICE_FAMILY=ACEX1K] [datab0,datab1,dataa0,dataa1,agb,aeb];
			7 [USE_LPM_FOR_AHDL_OPERATORS=OFF,lpm_width=2,ONE_INPUT_CONSTANT=0,MODE=0,CARRY_CHAIN=IGNORE,CASCADE_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,CASCADE_CHAIN_LENGTH=2,DEVICE_FAMILY=ACEX1K] [datab0,datab1,dataa0,dataa1,agb];
			9 [USE_LPM_FOR_AHDL_OPERATORS=OFF,lpm_width=2,ONE_INPUT_CONSTANT=0,MODE=1,CARRY_CHAIN=IGNORE,CASCADE_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,CASCADE_CHAIN_LENGTH=2,DEVICE_FAMILY=ACEX1K] [datab0,datab1,dataa0,dataa1,agb,aeb];
			10 [USE_LPM_FOR_AHDL_OPERATORS=OFF,lpm_width=2,ONE_INPUT_CONSTANT=0,MODE=1,CARRY_CHAIN=IGNORE,CASCADE_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,CASCADE_CHAIN_LENGTH=2,DEVICE_FAMILY=ACEX1K] [datab0,datab1,dataa0,dataa1,agb];
		}
	}
	altshift.tdf
	{
		altshift [USE_LPM_FOR_AHDL_OPERATORS,WIDTH=4,DEPTH=0] []
		{
			13 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=1,DEPTH=0] [data0,result0];
			17 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=10,DEPTH=0] [data0,data1,data2,data3,data4,data5,data6,data7,data8,data9,result0,result1,result2,result3,result4,result5,result6,result7,result8,result9];
			22 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=3,DEPTH=0] [data0,data1,data2,result0,result1,result2];
		}
	}
	lpm_add_sub.tdf
	{
		lpm_add_sub [STYLE,DEVICE_FAMILY,CARRY_CHAIN_LENGTH=32,CARRY_CHAIN=IGNORE,OPTIMIZE_FOR_SPEED=5,MAXIMIZE_SPEED=5,LPM_PIPELINE=0,ONE_INPUT_IS_CONSTANT=NO,LPM_DIRECTION=DEFAULT,LPM_REPRESENTATION=SIGNED,LPM_WIDTH,USE_LPM_FOR_AHDL_OPERATORS] [lpm_add_sub.inc,addcore.inc,look_add.inc,bypassff.inc,altshift.inc,aglobal.inc]
		{
			25 [STYLE=NORMAL,DEVICE_FAMILY=ACEX1K,CARRY_CHAIN_LENGTH=32,CARRY_CHAIN=IGNORE,OPTIMIZE_FOR_SPEED=5,MAXIMIZE_SPEED=5,LPM_PIPELINE=0,ONE_INPUT_IS_CONSTANT=NO,LPM_DIRECTION=SUB,LPM_REPRESENTATION=SIGNED,LPM_WIDTH=10,USE_LPM_FOR_AHDL_OPERATORS=OFF] [result9,result8,result7,result6,result5,result4,result3,result2,result1,result0,dataa9,dataa8,dataa7,dataa6,dataa5,dataa4,dataa3,dataa2,dataa1,dataa0,datab9,datab8,datab7,datab6,datab5,datab4,datab3,datab2,datab1,datab0];
			15 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=10,LPM_REPRESENTATION=SIGNED,LPM_DIRECTION=ADD,ONE_INPUT_IS_CONSTANT=NO,LPM_PIPELINE=0,MAXIMIZE_SPEED=5,OPTIMIZE_FOR_SPEED=5,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=ACEX1K,STYLE=NORMAL] [datab0,datab1,datab2,datab3,datab4,datab5,datab6,datab7,datab8,datab9,dataa0,dataa1,dataa2,dataa3,dataa4,dataa5,dataa6,dataa7,dataa8,dataa9,result0,result1,result2,result3,result4,result5,result6,result7,result8,result9];
			20 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=3,LPM_REPRESENTATION=SIGNED,LPM_DIRECTION=ADD,ONE_INPUT_IS_CONSTANT=YES,LPM_PIPELINE=0,MAXIMIZE_SPEED=5,OPTIMIZE_FOR_SPEED=5,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=ACEX1K,STYLE=NORMAL] [datab0,datab1,datab2,dataa0,dataa1,dataa2,cout,result0,result1,result2];
		}
	}
	addcore.tdf
	{
		addcore [USE_LPM_FOR_AHDL_OPERATORS,width,CONSTANT_CIN,CARRY_CHAIN,CARRY_CHAIN_LENGTH,DEVICE_FAMILY] [aglobal.inc,addcore.inc]
		{
			16 [USE_LPM_FOR_AHDL_OPERATORS=OFF,width=10,CONSTANT_CIN=1,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=ACEX1K] [cin,datab0,datab1,datab2,datab3,datab4,datab5,datab6,datab7,datab8,datab9,dataa0,dataa1,dataa2,dataa3,dataa4,dataa5,dataa6,dataa7,dataa8,dataa9,result0,result1,result2,result3,result4,result5,result6,result7,result8,result9];
			21 [USE_LPM_FOR_AHDL_OPERATORS=OFF,width=3,CONSTANT_CIN=1,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=ACEX1K] [cin,datab0,datab1,datab2,dataa0,dataa1,dataa2,cout,result0,result1,result2];
		}
	}
	lpm_counter.tdf
	{
		lpm_counter [USE_LPM_FOR_AHDL_OPERATORS,LPM_WIDTH,LPM_DIRECTION=DEFAULT,LPM_MODULUS=0,LPM_AVALUE=0,LPM_SVALUE=0,DEVICE_FAMILY,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,NOT_GATE_PUSH_BACK=OFF,CARRY_CNT_EN=SMART,LABWIDE_SCLR=ON] [aglobal.inc,dffeea.inc,lpm_counter.inc,lpm_compare.inc,cmpconst.inc,lpm_add_sub.inc,lpm_decode.inc,lpm_constant.inc]
		{
			19 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=3,LPM_DIRECTION=UP,LPM_MODULUS=0,LPM_AVALUE=0,LPM_SVALUE=0,DEVICE_FAMILY=ACEX1K,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,NOT_GATE_PUSH_BACK=ON,CARRY_CNT_EN=SMART,LABWIDE_SCLR=ON] [aclr,clock,cout,q0,q1,q2];
		}
	}
	hl_diff.gdf
	{
		hl_diff [] []
		{
			0 [] [];
		}
	}
}
TREE
{
	hl_diff::(0,0):(0): hl_diff.gdf
	{
		cmp10::(0,0):(198): cmp10.tdf
		{
			lpm_compare:2:(50,2):(48,lpm_compare_component): lpm_compare.tdf
			{
				comptree:3:(284,3):(56,comparator): comptree.tdf
				{
					cmpchain:4:(137,7):(52,cmp0): cmpchain.tdf
					{
						comptree:5:(140,7):(48,comp): comptree.tdf
						{
							cmpchain:6:(137,7):(48,cmp3): cmpchain.tdf;
							cmpchain:6:(137,7):(61,cmp2): cmpchain.tdf;
							cmpchain:6:(137,7):(74,cmp1): cmpchain.tdf;
							cmpchain:7:(137,7):(87,cmp0): cmpchain.tdf;
							comptree:8:(153,4):(100,sub_comptree): comptree.tdf
							{
								cmpchain:9:(137,7):(40,cmp1): cmpchain.tdf;
								cmpchain:10:(137,7):(53,cmp0): cmpchain.tdf;
								comptree:11:(153,4):(66,sub_comptree): comptree.tdf
								{
									cmpchain:10:(195,6):(36,gt_cmp_end): cmpchain.tdf;
								}
							}
						}
					}
					cmpchain:6:(144,5):(77,cmp_end): cmpchain.tdf;
					comptree:12:(153,4):(90,sub_comptree): comptree.tdf
					{
						cmpchain:10:(195,6):(36,gt_cmp_end): cmpchain.tdf;
					}
				}
				altshift:13:(306,2):(88,aeb_ext_lat_ffs): altshift.tdf;
				altshift:13:(307,2):(96,agb_ext_lat_ffs): altshift.tdf;
			}
		}
		cmp10::(0,0):(199): cmp10.tdf
		{
			lpm_compare:2:(50,2):(48,lpm_compare_component): lpm_compare.tdf
			{
				comptree:3:(284,3):(56,comparator): comptree.tdf
				{
					cmpchain:4:(137,7):(52,cmp0): cmpchain.tdf
					{
						comptree:5:(140,7):(48,comp): comptree.tdf
						{
							cmpchain:6:(137,7):(48,cmp3): cmpchain.tdf;
							cmpchain:6:(137,7):(61,cmp2): cmpchain.tdf;
							cmpchain:6:(137,7):(74,cmp1): cmpchain.tdf;
							cmpchain:7:(137,7):(87,cmp0): cmpchain.tdf;
							comptree:8:(153,4):(100,sub_comptree): comptree.tdf
							{
								cmpchain:9:(137,7):(40,cmp1): cmpchain.tdf;
								cmpchain:10:(137,7):(53,cmp0): cmpchain.tdf;
								comptree:11:(153,4):(66,sub_comptree): comptree.tdf
								{
									cmpchain:10:(195,6):(36,gt_cmp_end): cmpchain.tdf;
								}
							}
						}
					}
					cmpchain:6:(144,5):(77,cmp_end): cmpchain.tdf;
					comptree:12:(153,4):(90,sub_comptree): comptree.tdf
					{
						cmpchain:10:(195,6):(36,gt_cmp_end): cmpchain.tdf;
					}
				}
				altshift:13:(306,2):(88,aeb_ext_lat_ffs): altshift.tdf;
				altshift:13:(307,2):(96,agb_ext_lat_ffs): altshift.tdf;
			}
		}
		sub10::(0,0):(200): sub10.tdf
		{
			lpm_add_sub:25:(50,2):(57,lpm_add_sub_component): lpm_add_sub.tdf
			{
				addcore:16:(212,4):(64,adder): addcore.tdf;
				altshift:17:(222,2):(101,result_ext_latency_ffs): altshift.tdf;
				altshift:13:(224,2):(127,carry_ext_latency_ffs): altshift.tdf;
				altshift:13:(226,2):(135,oflow_ext_latency_ffs): altshift.tdf;
			}
		}
		cmp10::(0,0):(201): cmp10.tdf
		{
			lpm_compare:2:(50,2):(48,lpm_compare_component): lpm_compare.tdf
			{
				comptree:3:(284,3):(56,comparator): comptree.tdf
				{
					cmpchain:4:(137,7):(52,cmp0): cmpchain.tdf
					{
						comptree:5:(140,7):(48,comp): comptree.tdf
						{
							cmpchain:6:(137,7):(48,cmp3): cmpchain.tdf;
							cmpchain:6:(137,7):(61,cmp2): cmpchain.tdf;
							cmpchain:6:(137,7):(74,cmp1): cmpchain.tdf;
							cmpchain:7:(137,7):(87,cmp0): cmpchain.tdf;
							comptree:8:(153,4):(100,sub_comptree): comptree.tdf
							{
								cmpchain:9:(137,7):(40,cmp1): cmpchain.tdf;
								cmpchain:10:(137,7):(53,cmp0): cmpchain.tdf;
								comptree:11:(153,4):(66,sub_comptree): comptree.tdf
								{
									cmpchain:10:(195,6):(36,gt_cmp_end): cmpchain.tdf;
								}
							}
						}
					}
					cmpchain:6:(144,5):(77,cmp_end): cmpchain.tdf;
					comptree:12:(153,4):(90,sub_comptree): comptree.tdf
					{
						cmpchain:10:(195,6):(36,gt_cmp_end): cmpchain.tdf;
					}
				}
				altshift:13:(306,2):(88,aeb_ext_lat_ffs): altshift.tdf;
				altshift:13:(307,2):(96,agb_ext_lat_ffs): altshift.tdf;
			}
		}
		ctup3b::(0,0):(202): ctup3b.tdf
		{
			lpm_counter:19:(51,2):(33,lpm_counter_component): lpm_counter.tdf
			{
				lpm_add_sub:20:(298,7):(63,add_sub): lpm_add_sub.tdf
				{
					addcore:21:(212,4):(43,adder): addcore.tdf;
					altshift:22:(222,2):(59,result_ext_latency_ffs): altshift.tdf;
					altshift:13:(224,2):(71,carry_ext_latency_ffs): altshift.tdf;
					altshift:13:(226,2):(79,oflow_ext_latency_ffs): altshift.tdf;
				}
				lpm_constant:23:(318,6):(83,scdw): lpm_constant.tdf;
			}
		}
		hl_discr::(0,0):(204): hl_discr.tdf;
	}
}
