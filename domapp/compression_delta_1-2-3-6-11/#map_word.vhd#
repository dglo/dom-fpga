-------------------------------------------------------------------------------
--IceCube
--DOM Data Compression Submodule
--
--Author:   N. Kitamura
--Version:              0.011   9/8/2005
--Last:         0.01    9/7/2005
--Last:         0.00    6/27/2005
--File:     map_word.vhd
--
--------------------------------------------------------------------------------
--
--Ver 0.00      Handed over to Dawn (8/22/05)
--Ver 0.01      Fixed bugs (marked as "Added"/"Deleted")
--Ver 0.011     More bug fixes
--------------------------------------------------------------------------------
--Notes:
-- This module implements the main encoder state machine based on CW's algorithm.
--
-- * reset = (input) the module *must* be reset at the beginning of each channel.
-- * delta = (input) signed integer
-- * convert = (input) "delta" is latched when convert is high (allowed only when not busy)
-- * busy = (output) goes high during bit-length "transition"
-- * dout = (output) encoded pattern for delta.  Only the BPS bits starting from LSB
--        are valid.
-- * BPS = "Bits per Sample" (output) unsigned integer.

-- How To Use map_word.vhd
-- T1. Set reset=1 at the beginning of the channel
-- T2. if not end_of_channel and busy=0 then
--         Write delta, set convert=1
--     else if end_of_channel then
--         Finish channel
--     end if
-- T3. Read data, goto T3

-------------------------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
USE IEEE.STD_LOGIC_UNSIGNED.ALL;


--  reset_channel---------+-------------------+---------------------+
--                        |    +-----------...|...---------------...|...--> (stuff_busy)
--  clock--->....         |    |              |                     |
--            [map_word]  v    | [bit_stuff]  v      [word_counter] v
--            +-------------+  | +--------------+    +----------------+
--  convert-->|convert      |  | |    word_ready|--->|word_ready      |
--            |        ready|<-+-|~busy         |    |       count_out|---> count_out
--            |             |    |              |    |        word_out|---> word_out
--    delta-->|delta    dout|--->|DX            |    |                |
--            |          BPS|--->|BPS         DY|--->|word_in         |
--         +--|busy     wreq|-+->|wreq  word_ack|<-+-|word_ack        |
--         |  |             | |  |              |  | |                |
--         |  +-------------+ |  +--------------+  | +----------------+
--         |                  |                    +----------------------> have_word
--         |                  +-------------------------------------------> (map_done)
--         +--------------------------------------------------------------> encoder_busy


-- Signals for debugging only: "stuff_busy", "map_done"

-- 1. "reset_channel" must go high at the beginning of each channel.
-- 2. "convert" may go high only when "encoder_busy" is low.
-- 3. "delta" is latched on the rising edge of "clock" when "convert" is high.
-- 4. "wreq" ("map_done") goes high only when "stuff_busy" is low.
-- 5. "DX" and "BPS" latches the respective input when "wreq" goes high.
-- 6. "word_ack" ("have_word") goes high on the rising edge of "clock" following 
--    "word_ready" going high.
-- 7. "DY" is latched and connected to "word_out" when "word_ack" goes high.
-- 8. "word_out" and "count_out" are valid only when "have_word" is high.


ENTITY map_word IS
    PORT(
        clock       : IN  STD_LOGIC;
        reset       : IN  STD_LOGIC;    -- Reset on start of channel
        convert     : IN  STD_LOGIC;  -- Latch data and start conversion.  busy must be low.
        delta       : IN  SIGNED(10 DOWNTO 0);  --11 bits, signed integer
        ready       : IN  STD_LOGIC;  -- High when converted word can be written to output port
        last_input  : IN  STD_LOGIC;    -- Last word of channel
        dout        : OUT STD_LOGIC_VECTOR(10 DOWNTO 0);
        BPS         : OUT UNSIGNED(3 DOWNTO 0);
        wreq        : OUT STD_LOGIC;  -- Write request.  Goes high only when ready is high
        last_output : OUT STD_LOGIC;  -- Tells bit_stuff when to flush buffer and end
        busy        : OUT STD_LOGIC     -- high when in "transition"
        );
END map_word;


-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
ARCHITECTURE behave1 OF map_word IS

    TYPE states IS (IDLE, S1, S12, S2, S23, S3, S36, S6, S611, S11,
                      WAITING, WRITE_DONE);
    SIGNAL state_now, state_next : states;
    SIGNAL recall_state_next     : states;

    SIGNAL sig_wreq : STD_LOGIC;
    SIGNAL sig_busy : STD_LOGIC;

    SUBTYPE dx_vector IS STD_LOGIC_VECTOR(10 DOWNTO 0);

    SIGNAL dx    : dx_vector;
    SIGNAL trans : BOOLEAN;  --"In transition (bit length increasing)"
    SIGNAL BPSx  : UNSIGNED (3 DOWNTO 0);

BEGIN

    output_signals :

        dout <= dx;
    BPS <= BPSx;

    wreq <= sig_wreq;
    --busy <= sig_busy;
    busy <= '1' WHEN sig_busy = '1' OR trans ELSE '0';

    last_output <= last_input;


    state_transition :
    PROCESS (clock, reset, ready)
    BEGIN
        IF reset = '1' THEN
            state_now <= IDLE;
        ELSIF clock'EVENT AND clock = '1' THEN
            state_now <= state_next;
        END IF;
    END PROCESS;


    cw_state_machine :

    PROCESS (state_now, convert, trans, delta, ready, recall_state_next) IS

--                          |<--------11 bits---------->|
--   make_dx_vector(x, n):  [0....0][s][     abs(x)     ]
--                                     |<-- n-1 bits -->|

        FUNCTION make_dx_vector(d : IN INTEGER; n : IN INTEGER) RETURN dx_vector IS
            VARIABLE dd : STD_LOGIC_VECTOR(10 DOWNTO 0);
        BEGIN
            IF n = 1 THEN
                IF d = 0 THEN
                    dd := "00000000000";
                ELSE
                    dd := "00000000001";
                END IF;
            ELSE
                IF n < 11 THEN          -- Pad MSBs with zeros.
                    dd(10 DOWNTO n) := (OTHERS => '0');
                END IF;
                dd(n-1)          := conv_std_logic_vector(d, 11)(10);  -- sign bit
                dd(n-2 DOWNTO 0) := conv_std_logic_vector(ABS(d), n-1);
            END IF;
            RETURN dx_vector(dd);
        END FUNCTION;

        PROCEDURE next_state(s : IN states) IS
        BEGIN
            recall_state_next <= s;
            sig_busy          <= '1';
            IF ready = '1' THEN
                sig_wreq   <= '1';
                state_next <= WRITE_DONE;
            ELSE
                sig_wreq   <= '0';
                state_next <= WAITING;
            END IF;
        END PROCEDURE;


        --variable idata : integer range -2**11 to 2**11-1;     -- Deleted (7/8/2005 NK)
        VARIABLE idata : INTEGER RANGE -2**10 TO 2**10-1;  -- Added (7/8/2005 NK)

    BEGIN
        
        CASE state_now IS

            WHEN IDLE =>
                BPSx       <= B"0000";
                dx         <= (OTHERS => '0');
                trans      <= false;
                sig_busy   <= '1';
                sig_wreq   <= '0';
                state_next <= S3;

            WHEN S1 =>
                BPSx <= B"0001";
                IF convert = '0' THEN
                    sig_busy   <= '0';
                    state_next <= S1;
                ELSIF convert = '1' THEN
                    idata    := conv_integer(delta);
                    sig_busy <= '1';
                    IF idata = 0 THEN
                        dx    <= "00000000000";
                        trans <= false;
                        next_state(S1);
                    ELSE
                        dx    <= "00000000001";
                        trans <= true;
                        next_state(S12);
                    END IF;
                END IF;
                
            WHEN S12 =>
                BPSx     <= B"0010";
                sig_busy <= '1';
                trans    <= true;
                IF ABS(idata) = 1 THEN
                    dx <= make_dx_vector(idata, 2);
                    next_state(S2);     -- Added (9/7/2005 NK)
                ELSE
                    dx         <= "00000000010";
                    state_next <= S2;   -- Added (9/7/2005 NK)
                END IF;
                --next_state(S2);               -- Deleted (9/7/2005 NK)

            WHEN S2 =>
                BPSx <= B"0010";
                IF convert = '0' AND NOT trans THEN
                    sig_busy   <= '0';
                    state_next <= S2;
                ELSIF convert = '1' OR trans THEN
                    sig_busy <= '1';
                    IF NOT trans THEN
                        idata := conv_integer(delta);
                    END IF;
                    IF idata = 0 THEN
                        dx    <= "00000000000";
                        trans <= false;
                        next_state(S1);
                    ELSIF ABS(idata) = 1 THEN
                        dx    <= make_dx_vector(idata, 2);
                        trans <= false;
                        next_state(S2);
                    ELSE
                        dx       <= "00000000010";
                        trans    <= true;
                        sig_busy <= '1';
                        next_state(S23);
                    END IF;
                END IF;
                
            WHEN S23 =>
                BPSx     <= B"0011";
                sig_busy <= '1';
                trans    <= true;
                IF ABS(idata) >= 4 THEN
                    dx         <= "00000000100";
                    state_next <= S3;   -- Added (9/7/2005 NK)
                ELSE
                    IF idata = 2 THEN
                        dx <= "00000000010";
                    ELSE
                        dx <= make_dx_vector(idata, 3);
                    END IF;
                    next_state(S3);     -- Added (9/7/2005 NK)
                END IF;
                --next_state(S3);               -- Deleted (9/7/2005 NK)


            WHEN S3 =>
                BPSx <= B"0011";
                IF convert = '0' AND NOT trans THEN
                    sig_busy   <= '0';
                    state_next <= S3;
                ELSIF convert = '1' OR trans THEN
                    sig_busy <= '1';
                    IF NOT trans THEN
                        idata := conv_integer(delta);
                    END IF;
                    IF ABS(idata) <= 1 THEN
                        dx    <= make_dx_vector(idata, 3);
                        trans <= false;
                        next_state(S2);
                    ELSIF ABS(idata) >= 4 THEN
                        dx       <= "00000000100";
                        trans    <= true;
                        sig_busy <= '1';
                        next_state(S36);
                    ELSE
                        IF idata = 2 THEN
                            dx <= "00000000010";
                        ELSE
                            dx <= make_dx_vector(idata, 3);
                        END IF;
                        trans <= false;
                        next_state(S3);
                    END IF;
                END IF;
                
                
            WHEN S36 =>
                BPSx     <= "0110";               -- Added (9/7/2005 NK)
                sig_busy <= '1';
                trans    <= true;
                IF ABS(idata) >= 32 THEN
                                                  --dx <= make_dx_vector(32, 6);  -- Deleted (9/7/2005 NK)
                    dx         <= "00000100000";  -- Added (9/7/2005 NK)
                    state_next <= S6;             -- Added (9/8/2005 NK)
                ELSE
                    dx <= make_dx_vector(idata, 6);
                    next_state(S6);               -- Added (9/8/2005 NK)
                END IF;
                --next_state(S6);               -- Deleted (9/8/2005 NK)


            WHEN S6 =>
                BPSx <= "0110";
                IF convert = '0' AND NOT trans THEN
                    sig_busy   <= '0';
                    state_next <= S6;
                ELSIF convert = '1' OR trans THEN
                    sig_busy <= '1';
                    IF NOT trans THEN
                        idata := conv_integer(delta);
                    END IF;
                    IF ABS(idata) <= 3 THEN
                        dx    <= make_dx_vector(idata, 6);
                        trans <= false;
                        next_state(S3);
                    ELSIF ABS(idata) >= 32 THEN
                                                    --dx <= make_dx_vector(32, 6);  -- Deleted (9/7/2005 NK)
                        dx       <= "00000100000";  -- Added (9/7/2005 NK)
                        trans    <= true;
                        sig_busy <= '1';
                        next_state(S611);
                    ELSE
                        dx    <= make_dx_vector(idata, 6);
                        trans <= false;
                        next_state(S6);
                    END IF;
                END IF;
                
            WHEN S611 =>
                BPSx     <= "1011";     -- Added (9/7/2005 NK)
                sig_busy <= '1';
                trans    <= true;
                dx       <= make_dx_vector(idata, 11);
                next_state(S11);

            WHEN S11 =>
                BPSx <= "1011";
                IF convert = '0' AND NOT trans THEN
                    sig_busy   <= '0';
                    state_next <= S11;
                ELSIF convert = '1' OR trans THEN
                    sig_busy <= '1';
                    IF NOT trans THEN
                        idata := conv_integer(delta);
                    END IF;
                    trans         <= false;
                    IF ABS(idata) <= 31 THEN
                        dx <= make_dx_vector(idata, 11);
                        next_state(S6);
                    ELSE
                        dx <= make_dx_vector(idata, 11);
                        next_state(S11);
                    END IF;
                END IF;

            WHEN WAITING =>
                sig_busy <= '1';
                IF ready = '1' THEN
                    sig_wreq   <= '1';
                    state_next <= WRITE_DONE;
                ELSE
                    sig_wreq   <= '0';
                    state_next <= WAITING;
                END IF;
                
            WHEN WRITE_DONE =>
                sig_wreq   <= '0';
                sig_busy   <= '0';
                state_next <= recall_state_next;

        END CASE;

    END PROCESS;


END behave1;



-------------------------------------------------------------------------------










