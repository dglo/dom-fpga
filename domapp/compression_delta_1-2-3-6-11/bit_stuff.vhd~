-------------------------------------------------------------------------------
--IceCube
--DOM Data Compression Submodule
--
--Author:   N. Kitamura
--Version:	0.02	10/3/2005
--Last:		0.01	9/8/2005
--Last:  	0.00    7/14/2005
--File:     bit_stuff.vhd
--
-------------------------------------------------------------------------------
-- Ver 0.01		Corrected the timing violations.
-- Ver 0.02		Removed some of the changes in the last version.  (The removed latches were
-- 				functionally necessary.)
-------------------------------------------------------------------------------
--Notes:
--Stuff the valid bits of the incoming word into a 32-bit word size.
--When "wreq" (write request) becomes high, the "DX" and "BPS" are latched.
--When "wreq" goes high, "busy" becomes high on the following rising clock edge.
--"wreq" is allowed to go high only when "busy" is low.
--Once "busy" goes high, it returns to low in two clock cycles, if no whole word 
--is created.
--If a whole word is created, "word_ready" becomes high in two clock cycles after
--"busy" going high.  At this point, the module waits for "word_ack" to go high.
--When "word_ack" goes high, "busy" goes low on the next rising clock edge.
-------------------------------------------------------------------------------
library IEEE, lpm;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

USE lpm.lpm_components.all;
use work.cw_data_types.all;


entity bit_stuff is
    Port ( DX           : in std_logic_vector(10 downto 0);
           BPS          : in unsigned(3 downto 0);
           wreq         : in std_logic;
           clock        : in std_logic;
           reset        : in std_logic;
		   word_ack		: in std_logic;
		   last_input	: in std_logic;
           DY           : out word32;
           busy         : out std_logic;
           word_ready   : out std_logic	);
end bit_stuff;


architecture Behav of bit_stuff is

	constant L : integer := DX'left + 1; -- L = 11
	constant M : integer := 5;
	constant N : integer := 2**M; --N = 32

   	type 	state is (init, accept, stuff, prep, hold, hold2);
	attribute enum_encoding : string;
	attribute enum_encoding of state : type is "one-hot";
   	signal 	state_now, state_next :   state;

	signal	tail	: integer range 0 to N+L-2;
	signal	tail2	: integer range 0 to N+L-2;
   	signal 	ovf     : boolean;
	signal  BPSx	: unsigned(3 downto 0);
   	signal 	IB      : std_logic_vector(N+L-2 downto 0); --Input buffer
   	signal 	IR      : std_logic_vector(N+L-2 downto 0); --Intermediate register
   	signal 	IR2     : std_logic_vector(L-2 downto 0); --Intermediate registger 2
   	signal 	OB      : std_logic_vector(N-1 downto 0); --Output buffer


	component lpm_clshift
   		generic 
      		(	LPM_WIDTH    	: positive;
      			LPM_WIDTHDIST  	: positive;
      			LPM_SHIFTTYPE  	: string := "LOGICAL";
      			LPM_TYPE      	: string := "LPM_CLSHIFT";
      			LPM_HINT      	: string := "UNUSED");

   		port (	data            : in std_logic_vector(LPM_WIDTH-1 downto 0);
        		distance        : in std_logic_vector(LPM_WIDTHDIST-1 downto 0);
        		direction            : in std_logic := '0';
        		result               : out std_logic_vector(LPM_WIDTH-1 downto 0);
        		underflow, overflow  : out std_logic	);
	end component;

	signal shift_dist	: std_logic_vector(M-1 downto 0);
	signal shift_result : std_logic_vector(N+L-2 downto 0);
	signal this_is_last : std_logic;
	
	
   --attribute altera_attribute : string;
      -- Attribute set on architecture, not entity
   --attribute altera_attribute of Behav : architecture is "AUTO_SHIFT_REGISTER_RECOGNITION=ON";

	
begin

----------------------------------------------------------------------------
--The shift occurs in such a way that the old bits is filled with zeros.
--The over flow is not a problem.
inst_barrel_shifter: 
	component lpm_clshift
		generic map (	LPM_WIDTH => N+L-1,
						LPM_WIDTHDIST => M,
						LPM_SHIFTTYPE  => "LOGICAL"
					)
		port map (		data => IB,
						direction => '0', --left-shift (towards MSB)
						distance => shift_dist,
						result => shift_result
				);
	
-------------------------------------------------------------------------------	

--output_signals:
--   	DY   		<= OB;

-------------------------------------------------------------------------
state_transition:
   	process(clock, reset)
   	begin
      	if reset = '1' then
        	state_now <= init;
      	elsif clock'event and clock = '1' then
         	state_now <= state_next;
      	end if;
   	end process;


state_machine_comb:
   	process(	state_now, wreq, tail, ovf, BPSx, word_ack,
				IR2, OB, IR, tail2, shift_result, DX, BPS, 
				last_input, this_is_last	)
		
		variable temp : integer;
	begin
	-- Added (9/8/2005 NK)
	--	OB <= (others => '0');
	--	IR2 <= (others => '0');
	--	IR <= (others => '0');
	--	IB <= (others => '0');
	--	BPSx <= (Others => '0');
	--	DY <= (others => 'Z');
	--	this_is_last <= '0';
	--	ovf <= false;
	--	shift_dist <= (others => '0');
	-- End Added (9/8/2005 NK)
	
   		case state_now is

        	when init =>
				busy <= '1';
				word_ready <= '0';
               	tail2 <= 0;
				tail <= 0;
               	ovf <= false;
				shift_dist <= (others => '0');
				OB <= (others => '0');
				IR2 <= (others => '0');
				IR <= (others => '0');
				IB <= (others => '0');
				BPSx <= (others => '0');
				DY <= (others => 'Z');----------++++++++
               	state_next <= accept;

			when accept =>
				busy <= '0';
				word_ready <= '0';
				if wreq = '1' then
					IB <= X"0000000" & B"000" & DX; --Latch
					BPSx <= BPS;			--Latch
					shift_dist <= conv_std_logic_vector(tail, M);
					IR <= shift_result; 
					--IR <= IB sll tail (tail = 0..31) 
					if last_input = '1' then
						this_is_last <= '1';
					else
						this_is_last <= '0';
					end if;
					state_next <= stuff;
				else
					this_is_last <= '0';	-- Added (9/8/2005 NK)
					IB <= (others => '0');
					BPSx <= (others => '0');
					shift_dist <= (others => '0');
					IR <= (others => '0');
					DY <= (others => 'Z');--+++++++++++++++++++
					state_next <= accept;
				end if;
				         	
			when stuff =>
				busy <= '1';
				OB <= OB or IR(N-1 downto 0);
				IR2 <= IR(N+L-2 downto N);
				temp := tail + conv_integer(BPSx);
				tail2 <= temp mod N;
				ovf <= temp >= N;
				
				--tail2 <= (tail + conv_integer(BPSx)) mod N;
				--ovf <= (tail + conv_integer(BPSx)) >= N;
				--if (tail + conv_integer(BPSx)) >= N then
				if temp >= N then
					DY <= OB;
					word_ready <= '1';
					state_next <= prep;
				elsif this_is_last = '1' then
					DY <= OB;
					word_ready <= '1';
					state_next <= hold2;
				else
					word_ready <= '0';
					state_next <= prep;
				end if;

         	when prep =>
				busy <= '1';
				--word_ready <= '0';
				tail <= tail2;
				if ovf then
					--OB(N-1 downto L-1) <= (others => '0');
					--OB(L-2 downto 0) <= IR2;
					word_ready <= '1';
					state_next <= hold;
				else
					word_ready <= '0';
					state_next <= accept;
				end if;
				
			when hold =>
				busy <= '1';
				--word_ready <= '1';
				if word_ack = '1' then
					word_ready <= '0';
					OB(N-1 downto L-1) <= (others => '0');
					OB(L-2 downto 0) <= IR2;
					state_next <= accept;
				else
					word_ready <= '1';
					state_next <= hold;
				end if;
				
			when hold2 =>
				busy <= '1';
				word_ready <= '1';	-- Added (9/8/2005 NK)
				state_next <= hold;
				
      	end case;

	end process;
				

end Behav;