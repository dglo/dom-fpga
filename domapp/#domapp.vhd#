-------------------------------------------------------------------------------
-- Title      : DOMAPP
-- Project    : IceCube DOM main board
-------------------------------------------------------------------------------
-- File       : domapp.vhd
-- Author     : thorsten
-- Company    : LBNL
-- Created    : 
-- Last update: 2003-10-23
-- Platform   : Altera Excalibur
-- Standard   : VHDL'93
-------------------------------------------------------------------------------
-- Description: This is the toplevel design file. It holds the stripe, daq, ...
-------------------------------------------------------------------------------
-- Copyright (c) 2003 
-------------------------------------------------------------------------------
-- Revisions  :
-- Date        Version     Author    Description
-- 2003-10-23  V01-01-00   thorsten  
-------------------------------------------------------------------------------


LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.std_logic_arith.ALL;
USE IEEE.std_logic_unsigned.ALL;

ENTITY domapp IS
    PORT (
        -- stripe IO
        CLK_REF              : IN    STD_LOGIC;
        nPOR                 : IN    STD_LOGIC;
        nRESET               : INOUT STD_LOGIC;
        -- UART
        UARTRXD              : IN    STD_LOGIC;
        UARTDSRN             : IN    STD_LOGIC;
        UARTCTSN             : IN    STD_LOGIC;
        UARTRIN              : INOUT STD_LOGIC;
        UARTDCDN             : INOUT STD_LOGIC;
        UARTTXD              : OUT   STD_LOGIC;
        UARTRTSN             : OUT   STD_LOGIC;
        UARTDTRN             : OUT   STD_LOGIC;
        -- EBI
        INTEXTPIN            : IN    STD_LOGIC;
        EBIACK               : IN    STD_LOGIC;
        EBIDQ                : INOUT STD_LOGIC_VECTOR(15 DOWNTO 0);
        EBICLK               : OUT   STD_LOGIC;
        EBIWEN               : OUT   STD_LOGIC;
        EBIOEN               : OUT   STD_LOGIC;
        EBIADDR              : OUT   STD_LOGIC_VECTOR(24 DOWNTO 0);
        EBIBE                : OUT   STD_LOGIC_VECTOR(1 DOWNTO 0);
        EBICSN               : OUT   STD_LOGIC_VECTOR(3 DOWNTO 0);
        -- SDRAM
        SDRAMDQ              : INOUT STD_LOGIC_VECTOR (31 DOWNTO 0);
        SDRAMDQS             : INOUT STD_LOGIC_VECTOR (3 DOWNTO 0);
        SDRAMCLK             : OUT   STD_LOGIC;
        SDRAMCLKN            : OUT   STD_LOGIC;
        SDRAMCLKE            : OUT   STD_LOGIC;
        SDRAMWEN             : OUT   STD_LOGIC;
        SDRAMCASN            : OUT   STD_LOGIC;
        SDRAMRASN            : OUT   STD_LOGIC;
        SDRAMADDR            : OUT   STD_LOGIC_VECTOR (14 DOWNTO 0);
        SDRAMCSN             : OUT   STD_LOGIC_VECTOR (1 DOWNTO 0);
        SDRAMDQM             : OUT   STD_LOGIC_VECTOR (3 DOWNTO 0);
        -- general FPGA IO
        CLK1p                : IN    STD_LOGIC;
        CLK2p                : IN    STD_LOGIC;
        CLK3p                : IN    STD_LOGIC;
        CLK4p                : IN    STD_LOGIC;
        CLKLK_OUT2p          : OUT   STD_LOGIC;  -- 40MHz outpout for FADC
        -- setup information
        A_nB                 : IN    STD_LOGIC;
        COMM_RESET           : OUT   STD_LOGIC;  -- board reset initiated by the communication
        FPGA_LOADED          : OUT   STD_LOGIC;  -- pulled low when FPGA is configured
        -- Communications DAC
        COM_TX_SLEEP         : OUT   STD_LOGIC;
        COM_DB               : OUT   STD_LOGIC_VECTOR (13 DOWNTO 0);
        -- Communications ADC
        COM_AD_D             : IN    STD_LOGIC_VECTOR (11 DOWNTO 0);
        COM_AD_OTR           : IN    STD_LOGIC;
        -- Communications RS485
        HDV_Rx               : IN    STD_LOGIC;
        HDV_RxENA            : OUT   STD_LOGIC;
        HDV_TxENA            : OUT   STD_LOGIC;
        HDV_IN               : OUT   STD_LOGIC;
        -- FLASH ADC
        FLASH_AD_D           : IN    STD_LOGIC_VECTOR (11 DOWNTO 0);
        FLASH_AD_STBY        : OUT   STD_LOGIC;
        FLASH_NCO            : IN    STD_LOGIC;
        -- ATWD 0
        ATWD0_D              : IN    STD_LOGIC_VECTOR (9 DOWNTO 0);
        ATWDTrigger_0        : OUT   STD_LOGIC;
        TriggerComplete_0    : IN    STD_LOGIC;
        OutputEnable_0       : OUT   STD_LOGIC;
        CounterClock_0       : OUT   STD_LOGIC;
        ShiftClock_0         : OUT   STD_LOGIC;
        RampSet_0            : OUT   STD_LOGIC;
        ChannelSelect_0      : OUT   STD_LOGIC_VECTOR(1 DOWNTO 0);
        ReadWrite_0          : OUT   STD_LOGIC;
        AnalogReset_0        : OUT   STD_LOGIC;
        DigitalReset_0       : OUT   STD_LOGIC;
        DigitalSet_0         : OUT   STD_LOGIC;
        ATWD0VDD_SUP         : OUT   STD_LOGIC;
        -- ATWD 1
        ATWD1_D              : IN    STD_LOGIC_VECTOR (9 DOWNTO 0);
        ATWDTrigger_1        : OUT   STD_LOGIC;
        TriggerComplete_1    : IN    STD_LOGIC;
        OutputEnable_1       : OUT   STD_LOGIC;
        CounterClock_1       : OUT   STD_LOGIC;
        ShiftClock_1         : OUT   STD_LOGIC;
        RampSet_1            : OUT   STD_LOGIC;
        ChannelSelect_1      : OUT   STD_LOGIC_VECTOR(1 DOWNTO 0);
        ReadWrite_1          : OUT   STD_LOGIC;
        AnalogReset_1        : OUT   STD_LOGIC;
        DigitalReset_1       : OUT   STD_LOGIC;
        DigitalSet_1         : OUT   STD_LOGIC;
        ATWD1VDD_SUP         : OUT   STD_LOGIC;
        -- discriminator
        MultiSPE             : IN    STD_LOGIC;
        OneSPE               : IN    STD_LOGIC;
        MultiSPE_nl          : OUT   STD_LOGIC;
        OneSPE_nl            : OUT   STD_LOGIC;
        -- frontend testpulser (pulse)
        FE_TEST_PULSE        : OUT   STD_LOGIC;
        -- frontend testpulser (R2R ladder into signal path)
        FE_PULSER_P          : OUT   STD_LOGIC_VECTOR (3 DOWNTO 0);
        FE_PULSER_N          : OUT   STD_LOGIC_VECTOR (3 DOWNTO 0);
        -- frontend testpulser (R2R ladder ATWD ch3 MUX)
        R2BUS                : OUT   STD_LOGIC_VECTOR (7 DOWNTO 0);
        -- on board single LED flasher
        SingleLED_TRIGGER    : OUT   STD_LOGIC;
        -- Flasher board
        FL_Trigger           : OUT   STD_LOGIC;
        FL_Trigger_bar       : OUT   STD_LOGIC;
        FL_ATTN              : IN    STD_LOGIC;
        FL_PRE_TRIG          : OUT   STD_LOGIC;
        FL_TMS               : OUT   STD_LOGIC;
        FL_TCK               : OUT   STD_LOGIC;
        FL_TDI               : OUT   STD_LOGIC;
        FL_TDO               : IN    STD_LOGIC;
        -- local coincidence
        COINCIDENCE_OUT_DOWN : OUT   STD_LOGIC;
        COINC_DOWN_ALATCH    : OUT   STD_LOGIC;
        COINC_DOWN_ABAR      : IN    STD_LOGIC;
        COINC_DOWN_A         : IN    STD_LOGIC;
        COINC_DOWN_BLATCH    : OUT   STD_LOGIC;
        COINC_DOWN_BBAR      : IN    STD_LOGIC;
        COINC_DOWN_B         : IN    STD_LOGIC;
        COINCIDENCE_OUT_UP   : OUT   STD_LOGIC;
        COINC_UP_ALATCH      : OUT   STD_LOGIC;
        COINC_UP_ABAR        : IN    STD_LOGIC;
        COINC_UP_A           : IN    STD_LOGIC;
        COINC_UP_BLATCH      : OUT   STD_LOGIC;
        COINC_UP_BBAR        : IN    STD_LOGIC;
        COINC_UP_B           : IN    STD_LOGIC;
        -- PLD to FPGA EBI like interface (not fully defined yet)
        PLD_FPGA             : INOUT STD_LOGIC_VECTOR (7 DOWNTO 0);
        PLD_FPGA_nOE         : IN    STD_LOGIC;
        PLD_FPGA_nWE         : IN    STD_LOGIC;
        PLD_FPGA_BUSY        : OUT   STD_LOGIC;
        -- Test connector (JP13) No defined use for it yet!
        FPGA_D               : OUT   STD_LOGIC_VECTOR (7 DOWNTO 0);
        FPGA_DA              : OUT   STD_LOGIC;
        FPGA_CE              : OUT   STD_LOGIC;
        FPGA_RW              : OUT   STD_LOGIC;
        -- Test connector (JP19)        THERE IS NO 11   11 is CLK1n
        PGM                  : OUT   STD_LOGIC_VECTOR (15 DOWNTO 0)
        );
END domapp;


ARCHITECTURE arch_domapp OF domapp IS

    COMPONENT stripe
        PORT (
            clk_ref          : IN    STD_LOGIC;
            npor             : IN    STD_LOGIC;
            nreset           : INOUT STD_LOGIC;
            uartrxd          : IN    STD_LOGIC;
            uartdsrn         : IN    STD_LOGIC;
            uartctsn         : IN    STD_LOGIC;
            uartrin          : INOUT STD_LOGIC;
            uartdcdn         : INOUT STD_LOGIC;
            uarttxd          : OUT   STD_LOGIC;
            uartrtsn         : OUT   STD_LOGIC;
            uartdtrn         : OUT   STD_LOGIC;
            intextpin        : IN    STD_LOGIC;
            ebiack           : IN    STD_LOGIC;
            ebidq            : INOUT STD_LOGIC_VECTOR(15 DOWNTO 0);
            ebiclk           : OUT   STD_LOGIC;
            ebiwen           : OUT   STD_LOGIC;
            ebioen           : OUT   STD_LOGIC;
            ebiaddr          : OUT   STD_LOGIC_VECTOR(24 DOWNTO 0);
            ebibe            : OUT   STD_LOGIC_VECTOR(1 DOWNTO 0);
            ebicsn           : OUT   STD_LOGIC_VECTOR(3 DOWNTO 0);
            sdramdq          : INOUT STD_LOGIC_VECTOR(31 DOWNTO 0);
            sdramdqs         : INOUT STD_LOGIC_VECTOR(3 DOWNTO 0);
            sdramclk         : OUT   STD_LOGIC;
            sdramclkn        : OUT   STD_LOGIC;
            sdramclke        : OUT   STD_LOGIC;
            sdramwen         : OUT   STD_LOGIC;
            sdramcasn        : OUT   STD_LOGIC;
            sdramrasn        : OUT   STD_LOGIC;
            sdramaddr        : OUT   STD_LOGIC_VECTOR(14 DOWNTO 0);
            sdramcsn         : OUT   STD_LOGIC_VECTOR(1 DOWNTO 0);
            sdramdqm         : OUT   STD_LOGIC_VECTOR(3 DOWNTO 0);
            slavehclk        : IN    STD_LOGIC;
            slavehwrite      : IN    STD_LOGIC;
            slavehreadyi     : IN    STD_LOGIC;
            slavehselreg     : IN    STD_LOGIC;
            slavehsel        : IN    STD_LOGIC;
            slavehmastlock   : IN    STD_LOGIC;
            slavehaddr       : IN    STD_LOGIC_VECTOR(31 DOWNTO 0);
            slavehtrans      : IN    STD_LOGIC_VECTOR(1 DOWNTO 0);
            slavehsize       : IN    STD_LOGIC_VECTOR(1 DOWNTO 0);
            slavehburst      : IN    STD_LOGIC_VECTOR(2 DOWNTO 0);
            slavehwdata      : IN    STD_LOGIC_VECTOR(31 DOWNTO 0);
            slavehreadyo     : OUT   STD_LOGIC;
            slavebuserrint   : OUT   STD_LOGIC;
            slavehresp       : OUT   STD_LOGIC_VECTOR(1 DOWNTO 0);
            slavehrdata      : OUT   STD_LOGIC_VECTOR(31 DOWNTO 0);
            masterhclk       : IN    STD_LOGIC;
            masterhready     : IN    STD_LOGIC;
            masterhgrant     : IN    STD_LOGIC;
            masterhrdata     : IN    STD_LOGIC_VECTOR(31 DOWNTO 0);
            masterhresp      : IN    STD_LOGIC_VECTOR(1 DOWNTO 0);
            masterhwrite     : OUT   STD_LOGIC;
            masterhlock      : OUT   STD_LOGIC;
            masterhbusreq    : OUT   STD_LOGIC;
            masterhaddr      : OUT   STD_LOGIC_VECTOR(31 DOWNTO 0);
            masterhburst     : OUT   STD_LOGIC_VECTOR(2 DOWNTO 0);
            masterhsize      : OUT   STD_LOGIC_VECTOR(1 DOWNTO 0);
            masterhtrans     : OUT   STD_LOGIC_VECTOR(1 DOWNTO 0);
            masterhwdata     : OUT   STD_LOGIC_VECTOR(31 DOWNTO 0);
            intpld           : IN    STD_LOGIC_VECTOR(5 DOWNTO 0);
            dp0_2_portaclk   : IN    STD_LOGIC;
            dp0_portawe      : IN    STD_LOGIC;
            dp0_portaaddr    : IN    STD_LOGIC_VECTOR(13 DOWNTO 0);
            dp0_portadatain  : IN    STD_LOGIC_VECTOR(7 DOWNTO 0);
            dp0_portadataout : OUT   STD_LOGIC_VECTOR(7 DOWNTO 0);
            dp2_portawe      : IN    STD_LOGIC;
            dp2_portaaddr    : IN    STD_LOGIC_VECTOR(13 DOWNTO 0);
            dp2_portadatain  : IN    STD_LOGIC_VECTOR(7 DOWNTO 0);
            dp2_portadataout : OUT   STD_LOGIC_VECTOR(7 DOWNTO 0);
            gpi              : IN    STD_LOGIC_VECTOR(7 DOWNTO 0);
            gpo              : OUT   STD_LOGIC_VECTOR(7 DOWNTO 0)
            );
    END COMPONENT;

    -- gerneal siganls
    SIGNAL low  : STD_LOGIC;
    SIGNAL high : STD_LOGIC;

    SIGNAL CLK20 : STD_LOGIC;
    SIGNAL CLK40 : STD_LOGIC;
    SIGNAL CLK80 : STD_LOGIC;
    SIGNAL RST   : STD_LOGIC;

    SIGNAL TC : STD_LOGIC_VECTOR (7 DOWNTO 0);

    -- PLD to STRIPE bridge
    SIGNAL slavehclk      : STD_LOGIC;
    SIGNAL slavehwrite    : STD_LOGIC;
    SIGNAL slavehreadyi   : STD_LOGIC;
    SIGNAL slavehselreg   : STD_LOGIC;
    SIGNAL slavehsel      : STD_LOGIC;
    SIGNAL slavehmastlock : STD_LOGIC;
    SIGNAL slavehaddr     : STD_LOGIC_VECTOR(31 DOWNTO 0);
    SIGNAL slavehtrans    : STD_LOGIC_VECTOR(1 DOWNTO 0);
    SIGNAL slavehsize     : STD_LOGIC_VECTOR(1 DOWNTO 0);
    SIGNAL slavehburst    : STD_LOGIC_VECTOR(2 DOWNTO 0);
    SIGNAL slavehwdata    : STD_LOGIC_VECTOR(31 DOWNTO 0);
    SIGNAL slavehreadyo   : STD_LOGIC;
    SIGNAL slavebuserrint : STD_LOGIC;
    SIGNAL slavehresp     : STD_LOGIC_VECTOR(1 DOWNTO 0);
    SIGNAL slavehrdata    : STD_LOGIC_VECTOR(31 DOWNTO 0);

    -- STRIPE to PLD bridge
    SIGNAL masterhclk    : STD_LOGIC;
    SIGNAL masterhready  : STD_LOGIC;
    SIGNAL masterhgrant  : STD_LOGIC;
    SIGNAL masterhrdata  : STD_LOGIC_VECTOR(31 DOWNTO 0);
    SIGNAL masterhresp   : STD_LOGIC_VECTOR(1 DOWNTO 0);
    SIGNAL masterhwrite  : STD_LOGIC;
    SIGNAL masterhlock   : STD_LOGIC;
    SIGNAL masterhbusreq : STD_LOGIC;
    SIGNAL masterhaddr   : STD_LOGIC_VECTOR(31 DOWNTO 0);
    SIGNAL masterhburst  : STD_LOGIC_VECTOR(2 DOWNTO 0);
    SIGNAL masterhsize   : STD_LOGIC_VECTOR(1 DOWNTO 0);
    SIGNAL masterhtrans  : STD_LOGIC_VECTOR(1 DOWNTO 0);
    SIGNAL masterhwdata  : STD_LOGIC_VECTOR(31 DOWNTO 0);

    -- DP SRAM
    SIGNAL dp0_2_portaclk   : STD_LOGIC;
    SIGNAL dp0_portawe      : STD_LOGIC;
    SIGNAL dp0_portaaddr    : STD_LOGIC_VECTOR(13 DOWNTO 0);
    SIGNAL dp0_portadatain  : STD_LOGIC_VECTOR(7 DOWNTO 0);
    SIGNAL dp0_portadataout : STD_LOGIC_VECTOR(7 DOWNTO 0);
    SIGNAL dp2_portawe      : STD_LOGIC;
    SIGNAL dp2_portaaddr    : STD_LOGIC_VECTOR(13 DOWNTO 0);
    SIGNAL dp2_portadatain  : STD_LOGIC_VECTOR(7 DOWNTO 0);
    SIGNAL dp2_portadataout : STD_LOGIC_VECTOR(7 DOWNTO 0);

    -- interrupts
    SIGNAL intpld : STD_LOGIC_VECTOR(5 DOWNTO 0);
    -- GP stripe IO
    SIGNAL gpi    : STD_LOGIC_VECTOR(7 DOWNTO 0);
    SIGNAL gpo    : STD_LOGIC_VECTOR(7 DOWNTO 0);

    -- AHB_slave
    SIGNAL reg_write    : STD_LOGIC;
    SIGNAL reg_address  : STD_LOGIC_VECTOR(31 DOWNTO 0);
    SIGNAL reg_wdata    : STD_LOGIC_VECTOR(31 DOWNTO 0);
    SIGNAL reg_rdata    : STD_LOGIC_VECTOR(31 DOWNTO 0);
    SIGNAL reg_enable   : STD_LOGIC;
    SIGNAL reg_wait_sig : STD_LOGIC;

    -- AHB master
    SIGNAL start_trans       : STD_LOGIC;
    SIGNAL address           : STD_LOGIC_VECTOR(31 DOWNTO 0);
    SIGNAL wdata             : STD_LOGIC_VECTOR(31 DOWNTO 0);
    SIGNAL wait_sig          : STD_LOGIC;
    SIGNAL trans_length      : INTEGER;
    SIGNAL bus_error         : STD_LOGIC;
    SIGNAL master_addr_start : STD_LOGIC_VECTOR(15 DOWNTO 0);
    
BEGIN
    -- general
    low  <= '0';
    high <= '1';

--      CLK20   <= CLK1p;
--      CLK40   <= CLK1p;
    -- RST              <= '0';

    -- PLD to STRIPE bridge
    slavehclk <= CLK20;
    -- slavehwrite              <= '0';
    -- slavehreadyi     <= '0';
    -- slavehselreg     <= '0';
    -- slavehsel                <= '0';
    -- slavehmastlock   <= '0';
    -- slavehaddr               <= (others=>'0');
    -- slavehtrans              <= (others=>'0');
    -- slavehsize               <= (others=>'0');
    -- slavehburst              <= (others=>'0');
    -- slavehwdata              <= (others=>'0');
    -- slavehreadyo     <= ;
    -- slavebuserrint   <= ;
    -- slavehresp               <= ;
    -- slavehrdata              <= ;

    -- STRIPE to PLD bridge
    masterhclk <= CLK20;
    -- masterhready             <= '0';
    -- masterhgrant             <= '0';
    -- masterhrdata             <= (others=>'0');
    -- masterhresp                      <= (others=>'0');
    -- masterhwrite             <= ;
    -- masterhlock                      <= ;
    -- masterhbusreq            <= ;
    -- masterhaddr                      <= ;
    -- masterhburst             <= ;
    -- masterhsize                      <= ;
    -- masterhtrans             <= ;
    -- masterhwdata             <= ;

    -- DP SRAM
    dp0_2_portaclk  <= CLK20;
    dp0_portawe     <= '0';
    dp0_portaaddr   <= (OTHERS => '0');
    dp0_portadatain <= (OTHERS => '0');
    -- dp0_portadataout <= ;
    dp2_portawe     <= '0';
    dp2_portaaddr   <= (OTHERS => '0');
    dp2_portadatain <= (OTHERS => '0');
    -- dp2_portadataout <= ;

    -- interrupts
    intpld <= (OTHERS => '0');

    -- GP stripe IO
    gpi(7 DOWNTO 0) <= (OTHERS => '0');
    -- gpo              <= ;

    stripe_inst : stripe
        PORT MAP (
            clk_ref          => CLK_REF,
            npor             => nPOR,
            nreset           => nRESET,
            uartrxd          => UARTRXD,
            uartdsrn         => UARTDSRN,
            uartctsn         => UARTCTSN,
            uartrin          => UARTRIN,
            uartdcdn         => UARTDCDN,
            uarttxd          => UARTTXD,
            uartrtsn         => UARTRTSN,
            uartdtrn         => UARTDTRN,
            intextpin        => INTEXTPIN,
            ebiack           => EBIACK,
            ebidq            => EBIDQ,
            ebiclk           => EBICLK,
            ebiwen           => EBIWEN,
            ebioen           => EBIOEN,
            ebiaddr          => EBIADDR,
            ebibe            => EBIBE,
            ebicsn           => EBICSN,
            sdramdq          => SDRAMDQ,
            sdramdqs         => SDRAMDQS,
            sdramclk         => SDRAMCLK,
            sdramclkn        => SDRAMCLKN,
            sdramclke        => SDRAMCLKE,
            sdramwen         => SDRAMWEN,
            sdramcasn        => SDRAMCASN,
            sdramrasn        => SDRAMRASN,
            sdramaddr        => SDRAMADDR,
            sdramcsn         => SDRAMCSN,
            sdramdqm         => SDRAMDQM,
            slavehclk        => slavehclk,
            slavehwrite      => slavehwrite,
            slavehreadyi     => slavehreadyi,
            slavehselreg     => slavehselreg,
            slavehsel        => slavehsel,
            slavehmastlock   => slavehmastlock,
            slavehaddr       => slavehaddr,
            slavehtrans      => slavehtrans,
            slavehsize       => slavehsize,
            slavehburst      => slavehburst,
            slavehwdata      => slavehwdata,
            slavehreadyo     => slavehreadyo,
            slavebuserrint   => slavebuserrint,
            slavehresp       => slavehresp,
            slavehrdata      => slavehrdata,
            masterhclk       => masterhclk,
            masterhready     => masterhready,
            masterhgrant     => masterhgrant,
            masterhrdata     => masterhrdata,
            masterhresp      => masterhresp,
            masterhwrite     => masterhwrite,
            masterhlock      => masterhlock,
            masterhbusreq    => masterhbusreq,
            masterhaddr      => masterhaddr,
            masterhburst     => masterhburst,
            masterhsize      => masterhsize,
            masterhtrans     => masterhtrans,
            masterhwdata     => masterhwdata,
            intpld           => intpld,
            dp0_2_portaclk   => dp0_2_portaclk,
            dp0_portawe      => dp0_portawe,
            dp0_portaaddr    => dp0_portaaddr,
            dp0_portadatain  => dp0_portadatain,
            dp0_portadataout => OPEN,
            dp2_portawe      => dp2_portawe,
            dp2_portaaddr    => dp2_portaaddr,
            dp2_portadatain  => dp2_portadatain,
            dp2_portadataout => OPEN,
            gpi              => gpi,
            gpo              => gpo
            );

END arch_domapp;